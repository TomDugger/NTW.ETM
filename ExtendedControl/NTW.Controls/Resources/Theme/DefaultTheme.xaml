<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:bc="clr-namespace:NTW.Controls.Behaviours;assembly=NTW.Controls"
                    xmlns:con="clr-namespace:NTW.Controls"
                    xmlns:presentation="clr-namespace:NTW.Controls.Presentation">

    <!--Colors-->
    <Color x:Key="MainBackColor">DimGray</Color>
    <Color x:Key="MainForeColor">White</Color>


    <Color x:Key="FBackColor">Gray</Color>
    <Color x:Key="SBackColor">Orange</Color>
    <Color x:Key="TBackColor">DodgerBlue</Color>

    <Color x:Key="FForeColor">White</Color>
    <Color x:Key="SForeColor">Black</Color>
    <Color x:Key="TForeColor">White</Color>
    

    <!--Brushs-->
    <SolidColorBrush x:Key="MainBackBrush" Color="{DynamicResource MainBackColor}" />
    <SolidColorBrush x:Key="MainForeBrush" Color="{DynamicResource MainForeColor}" />

    <SolidColorBrush x:Key="FBackBrush" Color="{DynamicResource FBackColor}" />
    <SolidColorBrush x:Key="SBackBrush" Color="{DynamicResource SBackColor}" />
    <SolidColorBrush x:Key="TBackBrush" Color="{DynamicResource TBackColor}" />

    <SolidColorBrush x:Key="FForeBrush" Color="{DynamicResource FForeColor}" />
    <SolidColorBrush x:Key="SForeBrush" Color="{DynamicResource SForeColor}" />
    <SolidColorBrush x:Key="TForeBrush" Color="{DynamicResource TForeColor}" />

    <Style TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource FBackColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource FForeColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource FForeColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Border}" x:Key="WindowBorder">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource MainBackColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource MainForeColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource MainForeColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Border}" x:Key="SecondBorder">
        <Setter Property="Background" >
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource SBackColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource SForeColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Border}" x:Key="TreeBorder">
        <Setter Property="Background" >
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource TBackColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="TextElement.Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource TForeColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    
    <!--Text-->
    <Style TargetType="{x:Type TextBlock}" x:Key="H1">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="32" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    
    <Style TargetType="{x:Type TextBlock}" x:Key="H2">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="26" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="H3">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="22" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="H4">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="18" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="H5">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="H6">
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FontSize" Value="16" />
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="SecondTextBlock">
        <Setter Property="Foreground" Value="{StaticResource SForeBrush}" />
    </Style>

    <Style TargetType="{x:Type TextBlock}" x:Key="FirstTextBlock">
        <Setter Property="Foreground" Value="{StaticResource FForeBrush}" />
    </Style>

    <Style TargetType="{x:Type TextBox}">
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource FBackColor}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource FForeColor}" />
            </Setter.Value>
        </Setter>
    </Style>

    <!--Buttons-->
    <Style TargetType="{x:Type Button}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Foreground" Value="{StaticResource FForeBrush}" />
        <Setter Property="Padding" Value="0, 0, 0, 2" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border Padding="0" Margin="0" BorderThickness="0" Name="BB" >
                        <Grid>
                            <Border Name="MBB" Padding="0" Margin="0, 0, 0, 2" BorderThickness="0" Style="{StaticResource SecondBorder}">
                                <Border.RenderTransformOrigin>
                                    <Point X="0" Y="1" />
                                </Border.RenderTransformOrigin>
                                <Border.RenderTransform>
                                    <ScaleTransform ScaleY="0" />
                                </Border.RenderTransform>
                            </Border>
                            <ContentControl Name="ContentSite" Focusable="False" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Button.Content}">
                                <ContentControl.Foreground>
                                    <SolidColorBrush Color="{DynamicResource FBackColor}" />
                                </ContentControl.Foreground>
                            </ContentControl>
                            <Border Style="{StaticResource SecondBorder}" VerticalAlignment="Bottom" Height="2">
                            </Border>
                            <Border Visibility="Hidden" Name="FailedEnable" Opacity="0.5">
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentSite" Property="ContentControl.Foreground" Value="{StaticResource SForeBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource SForeBrush}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MBB" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="MBB" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="ContentSite" Property="ContentControl.Foreground" Value="{StaticResource FForeBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource FForeBrush}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="BB" Property="BorderThickness" Value="0, 0, 0, 4" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="FailedEnable" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DragAndDropContentControl" TargetType="{x:Type ContentControl}" >
        <Setter Property="Background" Value="Green" />
        <Style.Triggers>
            <Trigger Property="bc:WindowDragEndDropBehaviour.IsDragEnter" Value="True">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Grid Background="Red">
                                <Rectangle StrokeDashArray="0.5 1.0 0.3" StrokeThickness="2" >
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{DynamicResource FBackColor}" Opacity="0.5" />
                                    </Rectangle.Fill>
                                    <Rectangle.Stroke>
                                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                    </Rectangle.Stroke>
                                </Rectangle>
                                <TextBlock VerticalAlignment="Center" Style="{DynamicResource H3}" HorizontalAlignment="Center" Text="Drag files here..." />
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--ToggleButtons-->
    <Style TargetType="{x:Type ToggleButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource FBackBrush}" />
        <Setter Property="Foreground" Value="{StaticResource FForeBrush}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton" >
                    <Border Background="{TemplateBinding Background}" >
                        <Grid >
                            <Border  Name="SBB" Style="{StaticResource TreeBorder}" >
                                <Border.RenderTransformOrigin>
                                    <Point X="0" Y="1" />
                                </Border.RenderTransformOrigin>
                                <Border.RenderTransform>
                                    <ScaleTransform ScaleY="0" />
                                </Border.RenderTransform>
                            </Border>
                            <Border  Name="TBB" Style="{StaticResource SecondBorder}" >
                                <Border.RenderTransformOrigin>
                                    <Point X="0" Y="1" />
                                </Border.RenderTransformOrigin>
                                <Border.RenderTransform>
                                    <ScaleTransform ScaleY="0" />
                                </Border.RenderTransform>
                            </Border>
                            <ContentPresenter Name="ContentSite" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ContentSite" Property="ContentControl.Foreground" Value="{StaticResource SForeBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource SForeBrush}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TBB" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="TBB" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="ContentSite" Property="ContentControl.Foreground" Value="{StaticResource SForeBrush}" />
                            <Setter Property="Foreground" Value="{StaticResource SForeBrush}" />
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SBB" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="SBB" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--Combobox-->
    <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Setter Property="Background" Value="{StaticResource FBackBrush}" />
        <Setter Property="Foreground" Value="{StaticResource FForeBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderThickness="0, 0, 0, 2">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition />
                                <ColumnDefinition Width="20" />
                            </Grid.ColumnDefinitions>
                            <Border x:Name="Border" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" CornerRadius="0" BorderThickness="0" />
                            <Border Grid.Column="0" CornerRadius="0" Margin="1" BorderThickness="0" Background="{TemplateBinding Background}" />
                            <Path x:Name="Arrow" Fill="{TemplateBinding Foreground}" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" />
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Style="{x:Null}" />
    </ControlTemplate>

    <Style TargetType="ComboBox">
        <Setter Property="Foreground" Value="{StaticResource FForeBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource SBackBrush}" />
        <Setter Property="Background" Value="{StaticResource FBackBrush}" />
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton
                            Name="ToggleButton"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            Style="{StaticResource ComboBoxToggleButton}"
                            Grid.Column="2"
                            Focusable="false"
                            IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                            ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
                            Name="ContentSite"
                            IsHitTestVisible="False"
                            Content="{TemplateBinding SelectionBoxItem}"
                            ContentTemplate="{TemplateBinding bc:ComboBoxSelectionBoxAltTemplateBehaviour.SelectionBoxAltTemplate}"
                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                            Margin="10,3,30,3"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Stretch" />
                        <TextBox x:Name="PART_EditableTextBox"
                            Background="{TemplateBinding Background}"
                            BorderThickness="0"
                            TextAlignment="Center"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Center"
                            Margin="3,3,23,3"
                            Focusable="True"                               
                            Visibility="Hidden"
                            Foreground="{DynamicResource FForeBrush}"
                            IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup
                            Name="Popup"
                            Placement="Bottom"
                            IsOpen="{TemplateBinding IsDropDownOpen}"
                            AllowsTransparency="True"
                            Focusable="False"
                            PopupAnimation="Slide">
                            <Border BorderThickness="0, 0, 0, 2" >
                                <presentation:PresentGrid
                                  x:Name="DropDown"
                                  PresentContext="{TemplateBinding DataContext}"
                                  SnapsToDevicePixels="True"               
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <Border
                                    x:Name="DropDownBorder"
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="0" />
                                    <ScrollViewer SnapsToDevicePixels="True" >
                                        <ScrollViewer.Style>
                                            <Style>
                                                <Setter Property="ScrollViewer.Background" Value="{StaticResource FBackBrush}" />
                                            </Style>
                                        </ScrollViewer.Style>
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                    <Border Name="LoadBorder" Visibility="Hidden">
                                        <TextBlock Text="Load data" />
                                    </Border>
                                    <Border Name="NonExistDataBorder" Visibility="Hidden">
                                        <TextBlock Text="No exist data" />
                                    </Border>
                                </presentation:PresentGrid>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsSource" Value="{x:Null}">
                            <Setter TargetName="LoadBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ItemsSource.Length}" Value="0">
                            <Setter TargetName="NonExistDataBorder" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        
                        <Trigger Property="bc:ComboBoxSelectionBoxAltTemplateBehaviour.SelectionBoxAltTemplate" Value="{x:Null}">
                            <Setter Property="ContentTemplate" Value="{Binding SelectionBoxItemTemplate, RelativeSource={RelativeSource TemplatedParent}}" TargetName="ContentSite" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="0"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="PART_EditableTextBox" Property="Visibility"    Value="Visible"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" >
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource TBackColor}" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--ToolTips-->
    <Style TargetType="{x:Type ToolTip}">
        <Style.Resources>
            <Style TargetType="{x:Type TextBlock}" >
                <Setter Property="Foreground" >
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Placement" Value="Bottom" />
        <Setter Property="Background" Value="{StaticResource FBackBrush}" />
        <Setter Property="Foreground" Value="{StaticResource FForeBrush}" />
        <Setter Property="MinWidth" Value="150" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Grid MinWidth="50" MinHeight="50" Name="MainBG" RenderTransformOrigin="0.5 0.5">
                        <Grid.RenderTransform>
                            <ScaleTransform />
                        </Grid.RenderTransform>
                        <Border BorderThickness="1" Background="{TemplateBinding Background}" BorderBrush="{StaticResource FForeBrush}">
                            <ContentPresenter Margin="18" TextElement.Foreground="{StaticResource FForeBrush}" />
                        </Border>

                        <Polygon Points="0,0 16,0 0,16" >
                            <Polygon.Style>
                                <Style>
                                    <Setter Property="Polygon.Fill" Value="{StaticResource FForeBrush}" />
                                </Style>
                            </Polygon.Style>
                        </Polygon>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <EventTrigger RoutedEvent="ToolTip.Loaded" >
                            <BeginStoryboard >
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="MainBG" Storyboard.TargetProperty="RenderTransform.ScaleX" From="0" To="1" Duration="0:0:0.3" />
                                    <DoubleAnimation Storyboard.TargetName="MainBG" Storyboard.TargetProperty="RenderTransform.ScaleY" From="0" To="1" Duration="0:0:0.3" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ContextMenu-->
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border" BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Blue" />
                        </Border.BorderBrush>
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
                            <Setter TargetName="Border" Property="CornerRadius" Value="4" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--MenuItem-->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
       TargetType="Separator">
        <Setter Property="Height" Value="1"/>
        <Setter Property="Margin" Value="0,4,0,4"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Separator">
                    <Border BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="{DynamicResource FBackColor}" />
                        </Border.BorderBrush>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
                 TargetType="MenuItem">
        <Border Name="Border" >
            <Grid Name="MenuGrid">
                <ContentPresenter  Margin="6,3,6,3"  ContentSource="Header" RecognizesAccessKey="True" />
                <Popup Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                    <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource FBackBrush}" BorderBrush="{DynamicResource SBackBrush}" BorderThickness="1" >
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                <Setter TargetName="Popup" Property="PopupAnimation" Value="None"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource TBackBrush}"/>
                <Setter  TargetName="MenuGrid" Property="Background" Value="{DynamicResource TBackBrush}"></Setter>
                <Setter TargetName="Border" Property="BorderBrush"
              Value="Transparent"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="0,0,0,0"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,0,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource SForeBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- TopLevelItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" >
            <Grid>
                <ContentPresenter Margin="6,3,6,3" ContentSource="Header" RecognizesAccessKey="True" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource TBackBrush}"/>
                <Setter TargetName="Border" Property="BorderBrush" Value="Transparent"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource SForeBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" >
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon"/>
                <Border Name="Check"  Width="13" Height="13"  Visibility="Collapsed" Margin="6,0,6,0" Background="{DynamicResource FBackBrush}" BorderThickness="1" BorderBrush="{DynamicResource SBackBrush}">
                    <Path Name="CheckMark" Width="7" Height="7"  Visibility="Hidden" SnapsToDevicePixels="False"  Stroke="{DynamicResource FForeBrush}" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                </Border>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,0,2" DockPanel.Dock="Right" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="true">
                <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
            </Trigger>
            <Trigger Property="IsCheckable" Value="true">
                <Setter TargetName="Check" Property="Visibility" Value="Visible"/>
                <Setter TargetName="Icon" Property="Visibility" Value="Hidden"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource SBackBrush}"/>

            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource SForeBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuHeader -->
    <ControlTemplate  x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}" TargetType="MenuItem">
        <Border Name="Border" >
            <Grid >
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                    <ColumnDefinition Width="13"/>
                </Grid.ColumnDefinitions>
                <ContentPresenter Name="Icon" Margin="6,0,6,0" VerticalAlignment="Center" ContentSource="Icon"/>
                <ContentPresenter Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
                <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5,2,2,2" DockPanel.Dock="Right"/>
                <Path Grid.Column="3" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{DynamicResource FForeBrush}" />
                <Popup Name="Popup" Placement="Right" HorizontalOffset="0" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade" MinWidth="200">
                    <Border Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{DynamicResource FBackBrush}" BorderBrush="{DynamicResource SBackBrush}" BorderThickness="1" MaxHeight="300">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30" />
                                <RowDefinition />
                            </Grid.RowDefinitions>
                            <con:SearchBox IsVisibleTextBox="True" SearchText="{Binding Path=SearchTextMenu, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
                            </ScrollViewer>
                        </Grid>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon" Value="{x:Null}">
                <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
            </Trigger>
            <Trigger Property="IsHighlighted" Value="true">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource SBackBrush}"/>
            </Trigger>
            <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="True">
                <Setter TargetName="SubmenuBorder" Property="CornerRadius" Value="4"/>
                <Setter TargetName="SubmenuBorder" Property="Padding" Value="0,3,0,3"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="Foreground" Value="{DynamicResource SForeBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="{x:Type MenuItem}" TargetType="MenuItem">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource FBackColor}" />
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Role" Value="TopLevelHeader">
                <Setter Property="Template"
              Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}"/>
                <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
            </Trigger>
            <Trigger Property="Role" Value="TopLevelItem">
                <Setter Property="Template"
              Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuHeader">
                <Setter Property="Template"
              Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}"/>
            </Trigger>
            <Trigger Property="Role" Value="SubmenuItem">
                <Setter Property="Template"
              Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Tab control-->
    <Style TargetType="{x:Type TabControl}">
        <Setter Property="Background" Value="{x:Null}" />
        <Setter Property="BorderThickness" Value="0" />
    </Style>

    <!--Proggers bar-->
    <SolidColorBrush x:Key="ProgressBarBorderBrush" Color="Transparent" />
    <SolidColorBrush x:Key="ProgressBarBackgroundBrush" Color="White" />
    <SolidColorBrush x:Key="ProgressBarTrackBackgroundBrush" Color="#63D055" />

    <Style x:Key="{x:Type ProgressBar}" TargetType="{x:Type ProgressBar}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Border x:Name="BorderBackground" CornerRadius="3" BorderThickness="0"
                            BorderBrush="{StaticResource ProgressBarBorderBrush}"
                            Background="{StaticResource ProgressBarBackgroundBrush}">
                        <Grid>
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates">
                                    <VisualState x:Name="Determinate" />
                                    <VisualState x:Name="Indeterminate" />
                                </VisualStateGroup>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="PART_Track" Margin="0" BorderThickness="0" CornerRadius="3" />
                            <Border x:Name="PART_Indicator" Margin="0" BorderThickness="0" CornerRadius="3" HorizontalAlignment="Left"
                                    Background="{StaticResource ProgressBarTrackBackgroundBrush}" ClipToBounds="True">
                                <Border x:Name="DiagonalDecorator" Width="5000">
                                    <Border.Background>
                                        <DrawingBrush TileMode="Tile" Stretch="None" Viewbox="0,0,1,1" Viewport="0,0,36,34" ViewportUnits="Absolute">
                                            <DrawingBrush.RelativeTransform>
                                                <TranslateTransform X="0" Y="0" />
                                            </DrawingBrush.RelativeTransform>
                                            <DrawingBrush.Drawing>
                                                <GeometryDrawing Brush="#48C739" Geometry="M0,0 18,0 36,34 18,34 Z" />
                                            </DrawingBrush.Drawing>
                                        </DrawingBrush>
                                    </Border.Background>
                                    <Border.Triggers>
                                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation
                                                        Storyboard.TargetProperty="(Border.Background).(DrawingBrush.RelativeTransform).(TranslateTransform.X)"
                                                        From="0" To=".36" RepeatBehavior="Forever" Duration="0:0:18" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Border.Triggers>
                                </Border>
                            </Border>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>