<Window x:Class="ExtendedControl.Views.ControlWindow.TaskControlWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:b="clr-namespace:ExtendedControl.Behaviour"
        xmlns:bc="clr-namespace:NTW.Controls.Behaviours;assembly=NTW.Controls"
        xmlns:controls="clr-namespace:NTW.Controls;assembly=NTW.Controls"
        xmlns:vm="clr-namespace:ExtendedControl.ViewModels"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:c="clr-namespace:ExtendedControl.Converters"
        xmlns:con="clr-namespace:NTW.Controls.Converters"
        xmlns:sel="clr-namespace:NTW.Controls.Selectors;assembly=NTW.Controls"
        bc:WindowVisibilityBehaviour.CloseByHidden="True"
        bc:WindowMessageBehaviour.UseMessages="True"
        bc:HideButtonBehaviour.Command="{Binding Path=CloseWindowCommand}"
        b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}"
        bc:HideButtonBehaviour.UseHideButton="True"
        bc:WindowClosingBehaviour.UseAlterClosing="True" 
        Style="{DynamicResource DefaultPanelWindowStyle}" Width="600"
        MinWidth="{Binding RelativeSource={RelativeSource Mode=Self}, Path=MinSize.Width}"
        MinHeight="{Binding RelativeSource={RelativeSource Mode=Self}, Path=MinSize.Height}"
        MaxWidth="{Binding RelativeSource={RelativeSource Mode=Self}, Path=MaxSize.Width}"
        MaxHeight="{Binding RelativeSource={RelativeSource Mode=Self}, Path=MaxSize.Height}"
        mc:Ignorable="d" WindowStartupLocation="CenterScreen" ShowInTaskbar="True" SizeToContent="Manual"
        Title="TaskControlWindow" >
    <Border>
        <Border.Resources>
            <c:ErrorsConverter x:Key="ErrorsConverter1" />
            <c:ResourceStringFormatConverter x:Key="ResourceStringFormatConverter1" />
            <SolidColorBrush x:Key="FForeBrush" Color="{DynamicResource FForeColor}" />
            <SolidColorBrush x:Key="SForeBrush" Color="{DynamicResource SForeColor}" />
        </Border.Resources>
        <Grid >
            <Grid.RowDefinitions>
                <RowDefinition Height="50" />
                <RowDefinition />
                <RowDefinition Height="50" />
            </Grid.RowDefinitions>

            <ContentControl HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{Binding Path=State, UpdateSourceTrigger=PropertyChanged}">
                <ContentControl.ContentTemplateSelector>
                    <sel:StateViewModelSelector>
                        <sel:StateViewModelSelector.CreateTemplate>
                            <DataTemplate>
                                <TextBlock Text="{DynamicResource TaskControlCreateTasklogo}" Style="{DynamicResource H3}" VerticalAlignment="Bottom" Margin="20, 0, 0, 0" />
                            </DataTemplate>
                        </sel:StateViewModelSelector.CreateTemplate>
                        <sel:StateViewModelSelector.EditTemplate>
                            <DataTemplate>
                                <TextBlock Text="{DynamicResource TaskControlEditTaskLogo}" Style="{DynamicResource H3}" VerticalAlignment="Bottom" Margin="20, 0, 0, 0" />
                            </DataTemplate>
                        </sel:StateViewModelSelector.EditTemplate>
                    </sel:StateViewModelSelector>
                </ContentControl.ContentTemplateSelector>
            </ContentControl>

            <TabControl Grid.Row="1" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                <TabItem >
                    <TabItem.Header>
                        <TextBlock Width="120" Text="{DynamicResource TaskControlMainInfo}" Margin="20" Style="{DynamicResource H5}" TextWrapping="Wrap" />
                    </TabItem.Header>
                    <Grid TextElement.Foreground="{DynamicResource FForeBrush}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="30" />
                            <RowDefinition Height="30" />
                            <RowDefinition Height="30" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <TextBlock Text="{DynamicResource TaskControlTaskcaption}" VerticalAlignment="Center" HorizontalAlignment="Right" />
                        <TextBox Grid.Column="1" VerticalAlignment="Center" Margin="5, 0" MaxLength="50" Validation.ErrorTemplate="{DynamicResource validationFailed}">
                            <TextBox.Text>
                                <Binding Path="CurrentTask.Caption" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True" >
                                    <Binding.ValidationRules>
                                        <DataErrorValidationRule ValidatesOnTargetUpdated="True" />
                                    </Binding.ValidationRules>
                                </Binding>
                            </TextBox.Text>
                        </TextBox>

                        <StackPanel Grid.Row="1" Orientation="Horizontal" VerticalAlignment="Center" Margin="20, 0, 0, 0">
                            <TextBlock Text="{DynamicResource TaskControlCreater}" />
                            <TextBlock Text="{Binding Path=CurrentTask.CreaterName}" Margin="3, 0, 0, 0" />
                        </StackPanel>

                        <CheckBox Grid.Row="1" Grid.Column="1" Content="{DynamicResource TaskControlIsPersonal}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="20, 0"
                                IsChecked="{Binding Path=IsCurrentTaskPerson, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

                        <TextBlock Grid.Row="2" Grid.ColumnSpan="2" Text="{DynamicResource TaskControlContent}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="20, 0, 0, 0"/>

                        <StackPanel Grid.Row="2" Grid.ColumnSpan="2" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0, 0, 20, 0" Orientation="Horizontal">
                            <TextBlock Text="{DynamicResource TaskPanelCreateDate}" Margin="0, 0, 5, 0" />
                            <TextBlock Text="{Binding Path=CurrentTask.OpenDate, StringFormat='dd.MM.yyyy г. HH:mm:ss'}" />
                        </StackPanel>

                        <ContentControl Grid.Row="3" Grid.ColumnSpan="2" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
                            <ContentControl.Style>
                                <Style TargetType="{x:Type ContentControl}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <controls:EditableTextBox Grid.Row="3" Grid.ColumnSpan="2" MinHeight="200" Margin="5, 0" VisibilityPanel="False"
                                                            ObjectControlPanelVisible="False"
                                                            ControlFilePanelVisible="False"
                                                            bc:XamlToFlowDocumentBehaviour.DocumentXaml="{Binding Path=CurrentTask.Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Path=ShowFullSizeEditor, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate>
                                                        <Popup IsOpen="True" StaysOpen="False" MinWidth="400" MinHeight="400"
                                                                   PlacementTarget="{Binding RelativeSource={StaticResource WindowSource}}" Placement="Center"
                                                                   Width="{Binding RelativeSource={StaticResource WindowSource}, Path=ActualWidth}"
                                                                   Height="{Binding RelativeSource={StaticResource WindowSource}, Path=ActualHeight}">
                                                            <Border BorderThickness="1" >
                                                                <Border.BorderBrush>
                                                                    <SolidColorBrush Color="{DynamicResource TBackColor}" />
                                                                </Border.BorderBrush>
                                                                <Grid>
                                                                    <controls:EditableTextBox Name="MaxEditor" Grid.Row="3" Grid.ColumnSpan="2" MinHeight="200" Margin="5, 0" VisibilityPanel="True"
                                                                                                  ObjectControlPanelVisible="False"
                                                                                                  ControlFilePanelVisible="False"
                                                                                                  bc:XamlToFlowDocumentBehaviour.DocumentXaml="{Binding Path=CurrentTask.PText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                                                    <ToggleButton IsChecked="{Binding Path=ShowFullSizeEditor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Width="30" Height="30" Grid.Row="3" Grid.ColumnSpan="2" HorizontalAlignment="Right" VerticalAlignment="Top" >
                                                                        <ToggleButton.Content>
                                                                            <Rectangle Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Width="30" Height="30">
                                                                                <Rectangle.Fill>
                                                                                    <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                                                                </Rectangle.Fill>
                                                                                <Rectangle.OpacityMask>
                                                                                    <ImageBrush ImageSource="/ExtendedControl;component/Images/MinSize.png" />
                                                                                </Rectangle.OpacityMask>
                                                                            </Rectangle>
                                                                        </ToggleButton.Content>
                                                                    </ToggleButton>
                                                                </Grid>
                                                            </Border>
                                                        </Popup>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                        </ContentControl>

                        <ToggleButton Grid.Row="3" Grid.ColumnSpan="2" Width="30" Height="30" HorizontalAlignment="Right" VerticalAlignment="Top"
                                      IsChecked="{Binding Path=ShowFullSizeEditor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                            <ToggleButton.Content>
                                <Rectangle Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Width="30" Height="30">
                                    <Rectangle.Fill>
                                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                    </Rectangle.Fill>
                                    <Rectangle.OpacityMask>
                                        <ImageBrush ImageSource="/ExtendedControl;component/Images/FullSize.png" />
                                    </Rectangle.OpacityMask>
                                </Rectangle>
                            </ToggleButton.Content>
                        </ToggleButton>

                        <Grid Margin="10" Grid.Row="4" Grid.ColumnSpan="2">
                            <Grid.ColumnDefinitions >
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="50" />
                                <RowDefinition Height="50" />
                            </Grid.RowDefinitions>
                            <TextBlock Text="{DynamicResource TaskControlProject}" VerticalAlignment="Center" HorizontalAlignment="Right" />
                            <ComboBox Grid.Column="1" Margin="5, 0" VerticalAlignment="Center" ItemsSource="{Binding Path=Projects}" DisplayMemberPath="Caption" SelectedValuePath="ID" SelectedValue="{Binding Path=CurrentTask.IdProject, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                            <TextBlock Grid.Row="1" Text="{DynamicResource TaskControlType}" VerticalAlignment="Center" HorizontalAlignment="Right" />
                            <ComboBox Grid.Row="1" Grid.Column="1" VerticalAlignment="Center" Margin="5, 0" ItemsSource="{DynamicResource ArrayTypeTask}" DisplayMemberPath="Name" SelectedValuePath="Value" SelectedValue="{Binding Path=CurrentTask.TypeTask, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                            <TextBlock Grid.Column="2" Text="{DynamicResource TaskControlPriorety}" VerticalAlignment="Center" HorizontalAlignment="Right" />
                            <ComboBox Grid.Column="3" Margin="5, 0" VerticalAlignment="Center" ItemsSource="{DynamicResource ArrayPriorityTask}" DisplayMemberPath="Name" SelectedValuePath="Value" SelectedValue="{Binding Path=CurrentTask.PriorityTask, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                            <TextBlock Grid.Row="1" Grid.Column="2" Text="{DynamicResource TaskControlDeadline}" VerticalAlignment="Center" HorizontalAlignment="Right" />

                            <WrapPanel Orientation="Horizontal" VerticalAlignment="Center" Grid.Row="1" Grid.Column="3">
                                <DatePicker VerticalAlignment="Center" Margin="5, 0" DisplayDateStart="{Binding Path=CurrentTask.OpenDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedDate="{Binding Path=CurrentTask.EndDateOnly, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                                <controls:TimeControl Grid.Column="1" VerticalAlignment="Center" Margin="10, 0, 0, 0" Value="{Binding CurrentTask.EndTime, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            </WrapPanel>
                        </Grid>
                    </Grid>
                </TabItem>
                <TabItem >
                    <TabItem.Header>
                        <TextBlock Width="120" Text="{Binding CurrentTask.TaskFiles.Count, Converter={StaticResource ResourceStringFormatConverter1}, ConverterParameter=TaskControlFiles}" Margin="20" Style="{DynamicResource H5}"  />
                    </TabItem.Header>
                    <Grid >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="50" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <Button HorizontalContentAlignment="Stretch" VerticalAlignment="Stretch"
                                    Command="{Binding Path=ControlFilesCommand}" 
                                    CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" >
                            <Grid >
                                <TextBlock Text="{DynamicResource TaskControlButtonFiles}" VerticalAlignment="Center" HorizontalAlignment="Center" />
                            </Grid>
                        </Button>
                        <Grid Margin="10" Grid.Row="1" TextElement.Foreground="{DynamicResource FForeBrush}">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Button Content="{DynamicResource TaskControlClearAll}"  b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Command="{Binding Path=ClearAllFileOnTaskCommand}" />
                            <ItemsControl Grid.Row="1" Background="#01000000" ItemsSource="{Binding Path=CurrentTask.TaskFiles}" bc:WindowDragEndDropBehaviour.UseDrop="{x:Type sys:String}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Grid Height="30">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition />
                                                <ColumnDefinition Width="30" />
                                            </Grid.ColumnDefinitions>
                                            <Button Grid.Column="1" Content="X" b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Command="{Binding Path=RemoveFileOnListCommand}"
                                                                CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext}"/>
                                            <ProgressBar Grid.ColumnSpan="2" Name="ByProgress" Visibility="Hidden" Value="{Binding Path=Progress, UpdateSourceTrigger=PropertyChanged}" />
                                            <TextBlock Text="{Binding Path=OriginalName}" VerticalAlignment="Center" Margin="20, 0, 0, 0" />
                                        </Grid>
                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding Path=State}" Value="Load">
                                                <Setter TargetName="ByProgress" Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.Style>
                                    <Style TargetType="{x:Type ItemsControl}">
                                        <Setter Property="Background" Value="#01000000" />
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ItemsControl}">
                                                    <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                                        <ItemsPresenter />
                                                    </ScrollViewer>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <Trigger Property="bc:WindowDragEndDropBehaviour.IsDragEnter" Value="True">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Grid>
                                                                <ItemsPresenter />

                                                                <Rectangle StrokeDashArray="0.5 1.0 0.3" StrokeThickness="2" >
                                                                    <Rectangle.Fill>
                                                                        <SolidColorBrush Color="{DynamicResource FBackColor}" Opacity="0.5" />
                                                                    </Rectangle.Fill>
                                                                    <Rectangle.Stroke>
                                                                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                                                    </Rectangle.Stroke>
                                                                </Rectangle>
                                                                <TextBlock VerticalAlignment="Center" Style="{DynamicResource H3}" HorizontalAlignment="Center" Text="{DynamicResource TaskControlDragFilesHere}" />
                                                            </Grid>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </ItemsControl.Style>
                            </ItemsControl>
                        </Grid>
                    </Grid>
                </TabItem>
                <TabItem >
                    <TabItem.Header>
                        <TextBlock Width="120" Text="{Binding CurrentTask.Perfomers.Count, Converter={StaticResource ResourceStringFormatConverter1}, ConverterParameter=TaskControlPerfomers}" Margin="20" Style="{DynamicResource H5}" HorizontalAlignment="Center" TextWrapping="Wrap" />
                    </TabItem.Header>
                    <Grid TextElement.Foreground="{DynamicResource FForeBrush}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <StackPanel Orientation="Horizontal" >
                            <Button Content="{DynamicResource TaskControlPerfomersClearAll}" Width="120" Command="{Binding Path=ClearAllPerfomerOnListCommand}" 
                                                                bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=ShowClearAllButton, UpdateSourceTrigger=PropertyChanged}" 
                                                                bc:VisibilityOnNullBehaviour.OriginalSize="120, 30" />
                            <Button Content="{DynamicResource TaskControlPerfomersSelectAll}" Width="120" Command="{Binding Path=SetAllPerfomerOnListCommand}" 
                                                                bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=ShowSetAllButton, UpdateSourceTrigger=PropertyChanged}" 
                                                                bc:VisibilityOnNullBehaviour.OriginalSize="120, 30" />
                        </StackPanel>
                        <ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsControl Grid.Row="8" Grid.ColumnSpan="2" Style="{x:Null}"
                                      HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                      MaxHeight="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=ActualHeight, UpdateSourceTrigger=PropertyChanged}" 
                                      MaxWidth="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=ActualWidth, UpdateSourceTrigger=PropertyChanged}" >
                                <ItemsControl.ItemsSource>
                                    <Binding Path="CurrentTask.Perfomers" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                                        <Binding.ValidationRules>
                                            <DataErrorValidationRule ValidatesOnTargetUpdated="True" />
                                        </Binding.ValidationRules>
                                    </Binding>
                                </ItemsControl.ItemsSource>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border Margin="5" Style="{DynamicResource SecondBorder}" >
                                            <Grid Height="30">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="30" />
                                                    <ColumnDefinition />
                                                    <ColumnDefinition Width="30" />
                                                </Grid.ColumnDefinitions>
                                                <ToggleButton Grid.Column="2" Command="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.UpdatePerfomerCountCommand}"
                                                              IsChecked="{Binding Path=PersonInCharge, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                              bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" 
                                                              bc:VisibilityOnNullBehaviour.NegativeVisibilityOnNull="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.CurrentTask.IsPersonal, UpdateSourceTrigger=PropertyChanged}">
                                                    <ToggleButton.Content>
                                                        <Grid>
                                                            <Rectangle Fill="{DynamicResource FForeBrush}" Width="30" Height="30">
                                                                <Rectangle.OpacityMask>
                                                                    <ImageBrush ImageSource="/ExtendedControl;component/Images/PersonIsCharge.png" />
                                                                </Rectangle.OpacityMask>
                                                            </Rectangle>
                                                        </Grid>
                                                    </ToggleButton.Content>
                                                    <ToggleButton.ToolTip>
                                                        <ToolTip>
                                                            <TextBlock Text="{DynamicResource TaskControlPerfomersIsPersonInCharge}" />
                                                        </ToolTip>
                                                    </ToggleButton.ToolTip>
                                                </ToggleButton>
                                                <Grid bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" bc:VisibilityOnNullBehaviour.NegativeVisibilityOnNull="{Binding Path=IsNotRemoved, UpdateSourceTrigger=PropertyChanged}">
                                                    <Button b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Content="X" 
                                                        Command="{Binding Path=RemovePerfomerOnListCommand}" 
                                                        CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext}"
                                                        bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" 
                                                        bc:VisibilityOnNullBehaviour.NegativeVisibilityOnNull="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.CurrentTask.IsPersonal, UpdateSourceTrigger=PropertyChanged}"/>
                                                </Grid>
                                                <TextBlock Grid.Column="1" VerticalAlignment="Center" Foreground="{DynamicResource SForeBrush}" HorizontalAlignment="Center" Margin="20, 0" Text="{Binding Path=FullNamePerfomer}" FontWeight="Bold" />
                                            </Grid>
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <WrapPanel Orientation="Horizontal" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>
                        </ScrollViewer>
                        <StackPanel Grid.Row="2" Orientation="Horizontal">
                            <TextBlock Margin="3, 0" Text="{DynamicResource TaskControlResponsiblePersonsCount}"/>
                            <TextBlock Text="{Binding Path=CurrentTask.PersonOfChargeCount, UpdateSourceTrigger=PropertyChanged}"/>
                            <TextBlock Text="/" Margin="3, 0" />
                            <TextBlock Margin="5, 0, 0, 0" Text="{DynamicResource TaskControlPerfomersCount}" />
                            <TextBlock Margin="3, 0" Text="{Binding Path=CurrentTask.OtherPerfomerCount, UpdateSourceTrigger=PropertyChanged}"/>
                        </StackPanel>
                        <Grid Grid.Row="3" Height="30" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=ShowAddPanel, UpdateSourceTrigger=PropertyChanged}">
                            <bc:VisibilityOnNullBehaviour.OriginalSize>
                                <Point Y="30">
                                    <Point.X>
                                        <sys:Double>NaN</sys:Double>
                                    </Point.X>
                                </Point>
                            </bc:VisibilityOnNullBehaviour.OriginalSize>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition />
                            </Grid.ColumnDefinitions>
                            <Button Content="{DynamicResource TaskControlPerfomersAdd}" Width="Auto" Padding="5, 0" Command="{Binding Path=AddNewPerfomerCommand}" CommandParameter="{Binding ElementName=pcList, Path=SelectedValue, UpdateSourceTrigger=PropertyChanged}" />
                            <ComboBox Grid.Column="1" Name="pcList" ItemsSource="{Binding Path=UserListByPerfomers}" DisplayMemberPath="Item1" SelectedValuePath="Item2" />
                        </Grid>
                    </Grid>
                </TabItem>
            </TabControl>

            <StackPanel Grid.Row="2" Grid.ColumnSpan="2" HorizontalAlignment="Right" Orientation="Horizontal">
                <Button Width="150" Content="{DynamicResource TaskControlAccepted}" Command="{Binding Path=FineControlCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                <Button Width="150" Content="{DynamicResource TaskControlCancel}" Command="{Binding Path=CanceliWndowCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
            </StackPanel>

            <!--messages-->
            <ToggleButton HorizontalAlignment="Right" VerticalAlignment="Top" Width="20" Height="20" Margin="10" >
                <ToggleButton.Style>
                    <Style TargetType="{x:Type ToggleButton}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <Grid>
                                        <Rectangle Fill="{DynamicResource SBackBrush}" Width="20" Height="20" 
                                                       bc:VisibilityOnNullBehaviour.OriginalSize="20, 20" 
                                                       bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=CurrentTask.HasError, UpdateSourceTrigger=PropertyChanged}">
                                            <Rectangle.OpacityMask>
                                                <ImageBrush ImageSource="/ExtendedControl;component/Images/Warning.png" />
                                            </Rectangle.OpacityMask>
                                        </Rectangle>

                                        <Popup StaysOpen="False" IsOpen="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                                            <Border >
                                                <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Path=CurrentTask.Errors, Converter={StaticResource ErrorsConverter1}}" />
                                            </Border>
                                        </Popup>
                                    </Grid>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </ToggleButton.Style>
            </ToggleButton>
        </Grid>
    </Border>
</Window>
