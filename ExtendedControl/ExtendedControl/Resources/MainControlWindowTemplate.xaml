<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:b="clr-namespace:ExtendedControl.Behaviour"
                    xmlns:bc="clr-namespace:NTW.Controls.Behaviours;assembly=NTW.Controls"
                    xmlns:vm="clr-namespace:ExtendedControl.ViewModels"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:controls="clr-namespace:NTW.Controls;assembly=NTW.Controls"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:drag="clr-namespace:ExtendedControl.Views.DragDrop"
                    xmlns:c="clr-namespace:ExtendedControl.Converters"
                    xmlns:v="clr-namespace:Virtualization.Calendar;assembly=Virtualization.Calendar"
                    xmlns:selv="clr-namespace:Virtualization.Calendar.Selectors;assembly=Virtualization.Calendar"
                    xmlns:info="clr-namespace:Info.Controls;assembly=Info"
                    xmlns:sell="clr-namespace:ExtendedControl.Selectors">

    <Style TargetType="{x:Type controls:EditableTextBox}">
        <Setter Property="FileContent" >
            <Setter.Value>
                <Rectangle Width="30" Height="30" Focusable="False" >
                    <Rectangle.ToolTip>
                        <ToolTip>
                            <TextBlock Text="{DynamicResource EditablePanelFile}" />
                        </ToolTip>
                    </Rectangle.ToolTip>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Rectangle.Fill>
                    <Rectangle.OpacityMask>
                        <ImageBrush ImageSource="/ExtendedControl;component/Images/FileEditPanel.png" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Setter.Value>
        </Setter>
        <Setter Property="FontContent">
            <Setter.Value>
                <Rectangle Width="30" Height="30" Focusable="False" >
                    <Rectangle.ToolTip>
                        <ToolTip>
                            <TextBlock Text="{DynamicResource EditablePanelFont}" />
                        </ToolTip>
                    </Rectangle.ToolTip>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Rectangle.Fill>
                    <Rectangle.OpacityMask>
                        <ImageBrush ImageSource="/ExtendedControl;component/Images/FontEditPanel.png" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Setter.Value>
        </Setter>
        <Setter Property="AligenmentContent">
            <Setter.Value>
                <Rectangle Width="30" Height="30" Focusable="False" >
                    <Rectangle.ToolTip>
                        <ToolTip>
                            <TextBlock Text="{DynamicResource EditablePanelAligenment}" />
                        </ToolTip>
                    </Rectangle.ToolTip>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Rectangle.Fill>
                    <Rectangle.OpacityMask>
                        <ImageBrush ImageSource="/ExtendedControl;component/Images/AlignmentEditPanel.png" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Setter.Value>
        </Setter>
        <Setter Property="PageContent">
            <Setter.Value>
                <Rectangle Width="30" Height="30" Focusable="False" >
                    <Rectangle.ToolTip>
                        <ToolTip>
                            <TextBlock Text="{DynamicResource EditablePanelPage}" />
                        </ToolTip>
                    </Rectangle.ToolTip>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Rectangle.Fill>
                    <Rectangle.OpacityMask>
                        <ImageBrush ImageSource="/ExtendedControl;component/Images/PageSizeEditPanel.png" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Setter.Value>
        </Setter>
        <Setter Property="PrimitivyObjectContent">
            <Setter.Value>
                <Rectangle Width="30" Height="30" Focusable="False" >
                    <Rectangle.ToolTip>
                        <ToolTip>
                            <TextBlock Text="{DynamicResource EditablePanelPrimitive}" />
                        </ToolTip>
                    </Rectangle.ToolTip>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Rectangle.Fill>
                    <Rectangle.OpacityMask>
                        <ImageBrush ImageSource="/ExtendedControl;component/Images/PrimitiveEditPanel.png" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Setter.Value>
        </Setter>
        <Setter Property="ObjectContent">
            <Setter.Value>
                <Rectangle Width="30" Height="30" Focusable="False" >
                    <Rectangle.ToolTip>
                        <ToolTip>
                            <TextBlock Text="{DynamicResource EditablePanelObject}" />
                        </ToolTip>
                    </Rectangle.ToolTip>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Rectangle.Fill>
                    <Rectangle.OpacityMask>
                        <ImageBrush ImageSource="/ExtendedControl;component/Images/ObjectEditPanel.png" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Setter.Value>
        </Setter>
        <Setter Property="MarkerContent">
            <Setter.Value>
                <Rectangle Width="30" Height="30" Focusable="False" >
                    <Rectangle.ToolTip>
                        <ToolTip>
                            <TextBlock Text="{DynamicResource EditablePanelMarker}" />
                        </ToolTip>
                    </Rectangle.ToolTip>
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Rectangle.Fill>
                    <Rectangle.OpacityMask>
                        <ImageBrush ImageSource="/ExtendedControl;component/Images/MarkEditPanel.png" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Setter.Value>
        </Setter>
    </Style>
    
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <ControlTemplate x:Key="DBSettingsTemplate">
        <Border>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="50" />

                    <RowDefinition Height="30" />
                    <RowDefinition Height="30" />

                    <RowDefinition Height="*" />

                    <RowDefinition Height="30" />
                </Grid.RowDefinitions>

                <TextBlock Text="{DynamicResource DBSettingsLogo}" VerticalAlignment="Bottom" Padding="20, 0, 0, 0" Style="{DynamicResource H1}" />

                <TextBlock Grid.Row="1" Text="{DynamicResource DBSettingsConnectionType}" VerticalAlignment="Bottom" Padding="20, 0, 0, 0" />

                <ComboBox Grid.Row="2" Margin="20, 0" VerticalAlignment="Top" ItemsSource="{Binding Path=NamesProvider}" SelectedValue="{Binding Path=Provider, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <ContentControl Grid.Row="3" DataContext="{Binding Path=.}" Content="{Binding Path=.}" Template="{Binding Path=TemplateProvider}" />

                <StackPanel Grid.Row="4" Orientation="Horizontal" HorizontalAlignment="Right">
                    <Button Content="{DynamicResource DBSettingsTest}" MinWidth="140" Command="{Binding Path=TestCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                    <Button Content="{DynamicResource DBSettingsCreate}" MinWidth="140" Command="{Binding Path=CreateCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                    <Button Content="{DynamicResource DBSettingsDelete}" MinWidth="140" Command="{Binding Path=DeleteCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                </StackPanel>

                <!--messages-->
                <ToggleButton HorizontalAlignment="Right" VerticalAlignment="Top" Width="20" Height="20" Margin="10" >
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Grid>
                                            <Rectangle Fill="{DynamicResource SBackBrush}" Width="20" Height="20" 
                                                       bc:VisibilityOnNullBehaviour.OriginalSize="20, 20" 
                                                       bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=Connection.HasError, UpdateSourceTrigger=PropertyChanged}">
                                                <Rectangle.OpacityMask>
                                                    <ImageBrush ImageSource="/ExtendedControl;component/Images/Warning.png" />
                                                </Rectangle.OpacityMask>
                                            </Rectangle>
                                            
                                            <Popup StaysOpen="False" IsOpen="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                                                <Border >
                                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Path=Connection.Error}" />
                                                </Border>
                                            </Popup>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>  
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="AutorizationTemplate">
        <Border BorderThickness="1">
            <Border.BorderBrush>
                <SolidColorBrush Color="{DynamicResource TBackColor}" />
            </Border.BorderBrush>
            <Grid>
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="50" />

                        <RowDefinition Height="30" />
                        <RowDefinition Height="30" />
                        <RowDefinition Height="30" />
                        <RowDefinition Height="30" />

                        <RowDefinition Height="30" />

                        <RowDefinition Height="30" />

                        <RowDefinition Height="50" />
                    </Grid.RowDefinitions>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <TextBlock Grid.ColumnSpan="2" Style="{DynamicResource H1}" Text="{DynamicResource AutorizationLogo}" HorizontalAlignment="Center" />

                    <Button Grid.ColumnSpan="2" IsEnabled="True" HorizontalAlignment="Right" VerticalAlignment="Top" Width="40" Height="40" Content="-" Command="{Binding Path=HideWindowCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />

                    <TextBlock Grid.ColumnSpan="2" Text="{DynamicResource AutorizationLogin}" Grid.Row="1" VerticalAlignment="Bottom" Padding="20, 0, 0, 0" />
                    <ComboBox Grid.ColumnSpan="2" Grid.Row="2" VerticalAlignment="Top" Margin="20, 0" IsEditable="True" ItemsSource="{Binding Path=UserNames}" Text="{Binding Path=EnterUserName}" >
                        <ComboBox.InputBindings>
                            <KeyBinding Key="Enter" Command="{Binding Path=EnterUserCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
                        </ComboBox.InputBindings>
                    </ComboBox>

                    <TextBlock Grid.ColumnSpan="2" Text="{DynamicResource AutorizationPassword}" Grid.Row="3" VerticalAlignment="Bottom" Padding="20, 0, 0, 0" />
                    <PasswordBox Name="pasBox" Grid.ColumnSpan="2" Grid.Row="4" Margin="20, 0" VerticalAlignment="Top" b:PasswordBoxBehaviour.Password="{Binding Path=Password, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                        <PasswordBox.InputBindings>
                            <KeyBinding Key="Enter" Command="{Binding Path=EnterUserCommand}" CommandParameter="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
                        </PasswordBox.InputBindings>
                    </PasswordBox>

                    <TextBlock Text="CapsLock" Grid.ColumnSpan="2" Grid.Row="5" Style="{DynamicResource H5}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="{Binding ActiveCapsLock, Converter={StaticResource BooleanToVisibilityConverter}}" />
                    
                    <CheckBox Grid.ColumnSpan="2" Grid.Row="6" Content="{DynamicResource AutorizationRememberMe}" VerticalAlignment="Center" IsChecked="{Binding Path=AutoEnter, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Margin="20, 0" />

                    <Button Grid.Row="7" Content="{DynamicResource AutorizationEnter}" Command="{Binding Path=EnterUserCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                    <Button Grid.Row="7" Grid.Column="1" Content="{DynamicResource AutorizationExitOnApplication}" Command="{Binding Path=ExitToApplicationCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />

                    <ItemsControl Grid.RowSpan="8" Grid.ColumnSpan="2" VerticalAlignment="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowMessageBehaviour.VerticalPosition)}" Style="{x:Null}"
                                      ItemsSource="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowMessageBehaviour.Messages)}" MaxHeight="200"
                                      bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowMessageBehaviour.UseMessages)}">
                        <bc:VisibilityOnNullBehaviour.OriginalSize>
                            <Point >
                                <Point.X>
                                    <sys:Double>NaN</sys:Double>
                                </Point.X>
                                <Point.Y>
                                    <sys:Double>NaN</sys:Double>
                                </Point.Y>
                            </Point>
                        </bc:VisibilityOnNullBehaviour.OriginalSize>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <Grid Name="ErrorPanel" RenderTransformOrigin="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowMessageBehaviour.OriginalPoint)}" >
                                    <Grid.Background>
                                        <SolidColorBrush Color="{Binding Path=BackColor}" />
                                    </Grid.Background>
                                    <Grid.RenderTransform>
                                        <ScaleTransform ScaleY="0"  />
                                    </Grid.RenderTransform>
                                    <Label Padding="20, 10" Content="{Binding Path=Content}" FontSize="14" FontWeight="Bold" >
                                        <Label.Foreground>
                                            <SolidColorBrush Color="{Binding Path=ForeColor, IsAsync=True}" />
                                        </Label.Foreground>
                                    </Label>
                                    <Grid.Triggers>
                                        <EventTrigger RoutedEvent="Loaded">
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </Grid.Triggers>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseLeftButtonUp" >
                                            <i:InvokeCommandAction Command="{Binding Path=ClickMessageCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Grid>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                        <ItemsControl.Template>
                            <ControlTemplate TargetType="{x:Type ItemsControl}">
                                <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                    <ItemsPresenter />
                                </ScrollViewer>
                            </ControlTemplate>
                        </ItemsControl.Template>
                    </ItemsControl>
                </Grid>
            </Grid>
        </Border>
    </ControlTemplate>

    
    <ControlTemplate x:Key="AppSettingsTemplate">
        <Border>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Unloaded">
                    <i:InvokeCommandAction Command="{Binding Path=UnloadCommand}" />
                </i:EventTrigger>
                <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding Path=LoadCommand}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="50" />

                    <RowDefinition Height="30" />
                    <RowDefinition Height="30" />

                    <RowDefinition Height="30" />
                    <RowDefinition Height="30" />
                    <RowDefinition Height="30" />

                    <RowDefinition Height="*" />
                </Grid.RowDefinitions>

                <TextBlock Text="{DynamicResource AppSettingsCaption}" VerticalAlignment="Bottom" Padding="20, 0, 0, 0" Style="{DynamicResource H1}" />

                <TextBlock Grid.Row="1" Text="{DynamicResource AppSettingsLanguage}" VerticalAlignment="Bottom" Padding="20, 0, 0, 0" />
                <ComboBox Grid.Row="2" Margin="20, 0" VerticalAlignment="Top" ItemsSource="{Binding Path=Languages}" SelectedValue="{Binding Path=Language}" />

                <TextBlock Grid.Row="3" Text="{DynamicResource AppSettingsTheme}" VerticalAlignment="Bottom" Padding="20, 0, 0, 0" />
                <ComboBox Grid.Row="4" Margin="20, 0" VerticalAlignment="Top" ItemsSource="{Binding Path=ThemeList}" DisplayMemberPath="Item1" SelectedValuePath="Item2" SelectedValue="{Binding Path=AppTheme, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <ToggleButton Grid.Row="5" Content="RuntimeSetValues" IsChecked="{Binding Path=SetOnValues, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <WrapPanel Grid.Row="6" bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                    <Grid Height="30" Width="200" Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource AppSettingsMainBackColor}" VerticalAlignment="Center" Padding="10, 0" TextAlignment="Right" TextWrapping="Wrap" />
                        <Rectangle Grid.Column="1" >
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding Path=[MainBackColor], UpdateSourceTrigger=PropertyChanged}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <controls:ColorControl bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsCustom, UpdateSourceTrigger=PropertyChanged}" 
                                               Color="{Binding Path=[MainBackColor], Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" />
                    </Grid>

                    <Grid Height="30" Width="200" Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource AppSettingsMainForeColor}" VerticalAlignment="Center" Padding="10, 0" TextAlignment="Right" TextWrapping="Wrap" />
                        <Rectangle Grid.Column="1" >
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding Path=[MainForeColor], UpdateSourceTrigger=PropertyChanged}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <controls:ColorControl bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsCustom, UpdateSourceTrigger=PropertyChanged}" 
                                               Color="{Binding Path=[MainForeColor], Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" />
                    </Grid>

                    <Grid Height="30" Width="200" Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource AppSettingsFBackColor}" VerticalAlignment="Center" Padding="10, 0" TextAlignment="Right" TextWrapping="Wrap" />
                        <Rectangle Grid.Column="1" >
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding Path=[FBackColor], UpdateSourceTrigger=PropertyChanged}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <controls:ColorControl bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsCustom, UpdateSourceTrigger=PropertyChanged}"
                                               Color="{Binding Path=[FBackColor], Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" />
                    </Grid>

                    <Grid Height="30" Width="200" Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource AppSettingsSBackColor}" VerticalAlignment="Center" Padding="10, 0" TextAlignment="Right" TextWrapping="Wrap" />
                        <Rectangle Grid.Column="1" >
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding Path=[SBackColor], UpdateSourceTrigger=PropertyChanged}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <controls:ColorControl bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsCustom, UpdateSourceTrigger=PropertyChanged}"
                                               Color="{Binding Path=[SBackColor], Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" />
                    </Grid>

                    <Grid Height="30" Width="200" Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource AppSettingsTBackColor}" VerticalAlignment="Center" Padding="10, 0" TextAlignment="Right" TextWrapping="Wrap" />
                        <Rectangle Grid.Column="1" >
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding Path=[TBackColor], UpdateSourceTrigger=PropertyChanged}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <controls:ColorControl bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsCustom, UpdateSourceTrigger=PropertyChanged}"
                                               Color="{Binding Path=[TBackColor],Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" />
                    </Grid>

                    <Grid Height="30" Width="200" Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource AppSettingsFForeColor}" VerticalAlignment="Center" Padding="10, 0" TextAlignment="Right" TextWrapping="Wrap" />
                        <Rectangle Grid.Column="1" >
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding Path=[FForeColor], UpdateSourceTrigger=PropertyChanged}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <controls:ColorControl bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsCustom, UpdateSourceTrigger=PropertyChanged}"
                                               Color="{Binding Path=[FForeColor], Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" />
                    </Grid>

                    <Grid Height="30" Width="200" Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource AppSettingsSForeColor}" VerticalAlignment="Center" Padding="10, 0" TextAlignment="Right" TextWrapping="Wrap" />
                        <Rectangle Grid.Column="1" >
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding Path=[SForeColor], UpdateSourceTrigger=PropertyChanged}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <controls:ColorControl bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsCustom, UpdateSourceTrigger=PropertyChanged}"
                                               Color="{Binding Path=[SForeColor], Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" />
                    </Grid>

                    <Grid Height="30" Width="200" Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="30" />
                        </Grid.ColumnDefinitions>
                        <TextBlock Text="{DynamicResource AppSettingsTForeColor}" VerticalAlignment="Center" Padding="10, 0" TextAlignment="Right" TextWrapping="Wrap" />
                        <Rectangle Grid.Column="1" >
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{Binding Path=[TForeColor], UpdateSourceTrigger=PropertyChanged}" />
                            </Rectangle.Fill>
                        </Rectangle>
                        <controls:ColorControl bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsCustom, UpdateSourceTrigger=PropertyChanged}"
                                               Color="{Binding Path=[TForeColor], Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" />
                    </Grid>
                </WrapPanel>
            </Grid>
        </Border>
    </ControlTemplate>

    <ControlTemplate x:Key="SuncSettingsTemplate">
        <Border>
            <Grid MinWidth="400" HorizontalAlignment="Left" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                    <RowDefinition Height="50" />

                    <RowDefinition Height="30" />
                    <RowDefinition Height="30" />
                </Grid.RowDefinitions>
                <TextBlock Text="{DynamicResource SyncSettingsCaption}" VerticalAlignment="Bottom" Padding="20, 0, 0, 0" Style="{DynamicResource H1}" />

                <TextBlock Grid.Row="1" Text="{DynamicResource SyncSettingsAdressSyncServer}" VerticalAlignment="Bottom" Padding="20, 0, 0, 0" />
                <TextBox Grid.Row="2" Margin="20, 0" Text="{Binding Path=IpSyncServer, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Top" />
            </Grid>
        </Border>
    </ControlTemplate>


    <ControlTemplate x:Key="ProcessControlTemplate">
        <ControlTemplate.Resources>
            <c:ErrorsConverter x:Key="ErrorsConverter1" />
        </ControlTemplate.Resources>
        <Border>
            <Grid MinWidth="300" Margin="10" MaxWidth="300">
                <Grid.RowDefinitions>
                    <RowDefinition Height="30" />
                    
                    <RowDefinition Height="30" />
                    <RowDefinition Height="30" />

                    <RowDefinition Height="30" />
                    
                    <RowDefinition Height="30" />
                    <RowDefinition Height="30" />

                    <RowDefinition Height="30" />
                </Grid.RowDefinitions>

                <TextBlock Text="{DynamicResource ProcessControlProcessName}" Grid.Row="1" VerticalAlignment="Bottom" />
                <TextBox Grid.Row="2" VerticalAlignment="Center" >
                    <TextBox.Text>
                        <Binding Path="CurrentStartProcess.Caption" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                            <Binding.ValidationRules>
                                <DataErrorValidationRule ValidatesOnTargetUpdated="True" />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>

                <CheckBox Grid.Row="3" VerticalAlignment="Center" Margin="10, 0, 0, 0" Content="{DynamicResource ProcessControlFolder}" IsChecked="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.IsFolderPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <TextBlock Grid.Row="4" Text="{DynamicResource ProcessControlPathToProcess}" VerticalAlignment="Bottom" />
                <Grid Grid.Row="5">
                    <Grid.ColumnDefinitions >
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="30" />
                    </Grid.ColumnDefinitions>
                    <TextBox VerticalAlignment="Center" >
                        <TextBox.Text>
                            <Binding Path="CurrentStartProcess.PathToApp" Mode="TwoWay" UpdateSourceTrigger="PropertyChanged" NotifyOnValidationError="True">
                                <Binding.ValidationRules>
                                    <DataErrorValidationRule ValidatesOnTargetUpdated="True" />
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <Button Content="..." Grid.Column="1" Command="{Binding Path=ExictPathToAppCommand}" />
                </Grid>

                <StackPanel Grid.Row="6" HorizontalAlignment="Right" Orientation="Horizontal">
                    <Button Content="{DynamicResource ProcessControlAccepted}" Width="100" Command="{Binding Path=FineControlCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                    <Button Content="{DynamicResource ProcessControlCancel}" Width="100" Command="{Binding Path=CloseWindowCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" />
                </StackPanel>

                <!--messages-->
                <ToggleButton HorizontalAlignment="Right" Grid.RowSpan="4" VerticalAlignment="Top" Width="20" Height="20" Margin="10" >
                    <ToggleButton.Style>
                        <Style TargetType="{x:Type ToggleButton}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                        <Grid>
                                            <Rectangle Fill="{DynamicResource SBackBrush}" Width="20" Height="20" 
                                                       bc:VisibilityOnNullBehaviour.OriginalSize="20, 20" 
                                                       bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=CurrentStartProcess.HasError, UpdateSourceTrigger=PropertyChanged}">
                                                <Rectangle.OpacityMask>
                                                    <ImageBrush ImageSource="/ExtendedControl;component/Images/Warning.png" />
                                                </Rectangle.OpacityMask>
                                            </Rectangle>

                                            <Popup StaysOpen="False" IsOpen="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                                                <Border >
                                                    <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Path=CurrentStartProcess.Errors, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource ErrorsConverter1}}" />
                                                </Border>
                                            </Popup>
                                        </Grid>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ToggleButton.Style>
                </ToggleButton>
            </Grid>
        </Border>
    </ControlTemplate>
    
    <!--Panels template-->
    <ControlTemplate x:Key="ProcessPanelTemplate">
        <Border Style="{StaticResource WindowBorder}" MinHeight="55" MinWidth="55" >
            <Grid bc:GridDefinitionBehaviour.ParentPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                <bc:GridDefinitionBehaviour.GridDefinitions>
                    <GridLength>50</GridLength>
                    <GridLength>Auto</GridLength>
                    <GridLength>*</GridLength>
                </bc:GridDefinitionBehaviour.GridDefinitions>
                <Button Command="{Binding Path=CreateNewProcessCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" >
                    <Button.Content>
                        <Rectangle x:Name="content" Width="50" Height="50" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource FForeColor}" />
                            </Rectangle.Fill>
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="/ExtendedControl;component/Images/AddProcess.png" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </Button.Content>
                    <Button.ToolTip>
                        <TextBlock Text="{DynamicResource ProcessAddButton}" />
                    </Button.ToolTip>
                </Button>
                <controls:SearchBox Grid.Row="1" Grid.Column="1" SearchText="{Binding Path=SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                <ListBox Grid.Row="2" Grid.Column="2" ItemsSource="{Binding Path=ProcessCollectionView}" Name="ProcessItemsControl"
                         bc:WindowDragEndDropBehaviour.UseDrop="{x:Type sys:String}"
                         bc:MinMaxSizeFrameworkElementBehaviour.SizeOnPosition="20"
                         bc:MinMaxSizeFrameworkElementBehaviour.ParentPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Border Name="board" Style="{DynamicResource SecondBorder}" Background="{x:Null}" Width="50" Height="50" Margin="2"
                                bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}" >
                                <Border.RenderTransformOrigin>
                                    <Point X="0.5" Y="0.5" />
                                </Border.RenderTransformOrigin>
                                <Border.RenderTransform>
                                    <ScaleTransform ScaleX="0" ScaleY="0" />
                                </Border.RenderTransform>
                                <Border.ContextMenu>
                                    <ContextMenu >
                                        <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:ProcessViewModel}"
                                              Header="{DynamicResource ProcessEditButton}" 
                                              Command="{Binding Path=EditProcessCommand}" 
                                              CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}"/>
                                        <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:ProcessViewModel}"
                                              Header="{DynamicResource ProcessRemoveButton}" 
                                              Command="{Binding Path=DeleteProcessCommand}"
                                              CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}"/>
                                        <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:ProcessViewModel}"
                                              Header="{DynamicResource ProcessCopyButton}" 
                                              Command="{Binding Path=CopyProcessCommand}"
                                              CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}"/>
                                    </ContextMenu>
                                </Border.ContextMenu>
                                <Border.ToolTip>
                                    <ToolTip>
                                        <TextBlock Text="{Binding Path=Caption}" />
                                    </ToolTip>
                                </Border.ToolTip>
                                <Grid Style="{x:Null}">
                                    <Image Source="{Binding Path=Icon}" />
                                    <Border VerticalAlignment="Top" Padding="3" Opacity="0.6">
                                        <TextBlock Name="BackText" TextAlignment="Left" Text="{Binding Path=Caption, IsAsync=True}"/>
                                    </Border>
                                    <Border Background="Transparent" VerticalAlignment="Top" Padding="3">
                                        <TextBlock Name="UpText" TextAlignment="Left" Text="{Binding Path=Caption, IsAsync=True}" />
                                    </Border>
                                </Grid>
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseLeftButtonUp">
                                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}, Path=DataContext.ExecutionAppCommand}" CommandParameter="{Binding Path=.}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </Border>
                            <DataTemplate.Triggers>
                                <EventTrigger RoutedEvent="Loaded" >
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="board" Storyboard.TargetProperty="RenderTransform.ScaleX" From="0" To="1" Duration="0:0:0.3" />
                                            <DoubleAnimation Storyboard.TargetName="board" Storyboard.TargetProperty="RenderTransform.ScaleY" From="0" To="1" Duration="0:0:0.3" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                                <DataTrigger Binding="{Binding Path=IsExist, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter TargetName="BackText" Property="TextBlock.TextDecorations">
                                        <Setter.Value>
                                            <TextDecorationCollection>
                                                <TextDecoration Location="Strikethrough"/>
                                            </TextDecorationCollection>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=IsExist, UpdateSourceTrigger=PropertyChanged}" Value="False">
                                    <Setter TargetName="UpText" Property="TextBlock.TextDecorations">
                                        <Setter.Value>
                                            <TextDecorationCollection>
                                                <TextDecoration Location="Strikethrough"/>
                                            </TextDecorationCollection>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <bc:ExtendedTemplateBeahviour.Template>
                        <DataTemplate>
                            <Rectangle Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Width="50" Height="50">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                </Rectangle.Fill>
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="/ExtendedControl;component/Images/Bottom.png" />
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <DataTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="content" Property="Fill">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource SForeColor}" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </bc:ExtendedTemplateBeahviour.Template>
                </ListBox>
            </Grid>
        </Border>
    </ControlTemplate>
    <Style TargetType="{x:Type ContentControl}" x:Key="ProcessPanelStyle" >
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{DynamicResource ProcessPanelTemplate}" />
    </Style>

    <ControlTemplate x:Key="NotesPanelTemplate">
        <Border Style="{StaticResource WindowBorder}" MinHeight="70" MinWidth="170" >
            <Grid bc:GridDefinitionBehaviour.ParentPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                <bc:GridDefinitionBehaviour.GridDefinitions>
                    <GridLength>Auto</GridLength>
                    <GridLength>Auto</GridLength>
                    <GridLength>*</GridLength>
                </bc:GridDefinitionBehaviour.GridDefinitions>

                <Grid bc:FlowDirectionOnPositionBehaviour.Position="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}"
                  bc:GridDefinitionBehaviour.IsNegativePosition="True" 
                  bc:GridDefinitionBehaviour.ParentPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                    <bc:GridDefinitionBehaviour.GridDefinitions>
                        <GridLength>50</GridLength>
                        <GridLength>50</GridLength>
                        <GridLength>50</GridLength>
                        <GridLength>*</GridLength>
                    </bc:GridDefinitionBehaviour.GridDefinitions>
                    <Button Command="{Binding Path=CreateNewNoteGroupCommand}" FlowDirection="LeftToRight">
                        <Rectangle Width="50" Height="50" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource FForeColor}" />
                            </Rectangle.Fill>
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="/ExtendedControl;component/Images/AddGroupNote.png" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="{DynamicResource NotesPanelCreateGroup}" />
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Grid.Row="1" Grid.Column="1" Command="{Binding Path=CreateNewNoteCommand}" FlowDirection="LeftToRight">
                        <Rectangle Width="50" Height="50" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource FForeColor}" />
                            </Rectangle.Fill>
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="/ExtendedControl;component/Images/AddNote.png" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="{DynamicResource NotesPanelCreateNote}" />
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                    <Button Grid.Row="2" Grid.Column="2" Command="{Binding Path=ReturnAllNoteCommand}" FlowDirection="LeftToRight" >
                        <Rectangle Width="50" Height="50" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource FForeColor}" />
                            </Rectangle.Fill>
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="/ExtendedControl;component/Images/Unfasten.png" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="{DynamicResource NotesPanelReturnAllNote}" />
                            </ToolTip>
                        </Button.ToolTip>
                    </Button>
                </Grid>

                <controls:SearchBox Grid.Row="1" Grid.Column="1" SearchText="{Binding Path=SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                <ListBox Grid.Row="2" Grid.Column="2" ItemsSource="{Binding Path=NotesGroupsCollectionView}" SelectionMode="Single"
                         bc:ListBoxselectionBehaviour.OnlyLeftselection="True" IsSynchronizedWithCurrentItem="False"
                         SelectedItem="{Binding Path=SelectedGroup, Mode=TwoWay, IsAsync=True, UpdateSourceTrigger=PropertyChanged}">
                    <ListBox.Resources>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" x:Key="BorderBR" />
                        <SolidColorBrush Color="{DynamicResource SForeColor}" x:Key="BorderBRS" />
                        <SolidColorBrush Color="{DynamicResource TBackColor}" x:Key="BorderBRT" />
                    </ListBox.Resources>
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="{x:Type ListBoxItem}">
                            <Setter Property="bc:ItemsControlExtantionalBehaviour.UseUnselection" Value="True" />
                            <Setter Property="IsSelected" Value="{Binding Path=ShowNotes, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                        <Grid Height="Auto" MinHeight="50" Margin="5, 5, 2, 5" 
                                              bc:MinMaxSizeFrameworkElementBehaviour.SizeOnPosition="130"
                                              bc:MinMaxSizeFrameworkElementBehaviour.MinOnParentPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}" 
                                              bc:GridDefinitionBehaviour.ParentPosition="{Binding RelativeSource={StaticResource WindowSource}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                            <bc:GridDefinitionBehaviour.GridDefinitions>
                                                <GridLength>Auto</GridLength>
                                                <GridLength>Auto</GridLength>
                                            </bc:GridDefinitionBehaviour.GridDefinitions>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>

                                            <Grid>
                                                <Border Style="{DynamicResource SecondBorder}" Background="{Binding Path=Color}"
                                                        bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True"
                                                        bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                                    <Grid>
                                                        <TextBox Style="{StaticResource ReadOnlyTextBoxStyle}" Background="Transparent" FontWeight="Bold" Text="{Binding Path=NameGroup, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Left" VerticalAlignment="Top" FlowDirection="LeftToRight" Margin="3" TextWrapping="Wrap" />
                                                        <TextBlock Text="{Binding Path=NotesCount}" FontWeight="Bold" HorizontalAlignment="Right" VerticalAlignment="Bottom" FlowDirection="LeftToRight" Margin="3, 3, 20, 3" 
                                                                   bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True"/>
                                                    </Grid>
                                                    <Border.ContextMenu>
                                                        <ContextMenu>
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                  Header="{DynamicResource NotesPanelConMenuCreateNote}"
                                                                  Command="{Binding Path=CreateNewNoteCommand}"
                                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <Separator />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                  Header="{DynamicResource NotesPanelConMenuRemoveGroup}" 
                                                                  Command="{Binding Path=RemoveNoteGroupCommand}"
                                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                  Header="{DynamicResource NotesPanelConMenuCopyGroup}" 
                                                                  Command="{Binding Path=CopyNoteGroupCommand}"
                                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                  Header="{DynamicResource NotesPanelConMenuClearGroup}"
                                                                  Command="{Binding Path=ClearNoteGroupCommand}"
                                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <Separator />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                  Header="{DynamicResource NotesPanelConMenuReturnAll}"
                                                                  Command="{Binding Path=ReturnNoteOnGroupCommand}"
                                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <Separator />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuGroupBlue}"
                                                                                      Command="{Binding Path=ColorsCommand[0]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuGroupGreen}"
                                                                                      Command="{Binding Path=ColorsCommand[1]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuGroupPink}"
                                                                                      Command="{Binding Path=ColorsCommand[2]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuGroupWhite}"
                                                                                      Command="{Binding Path=ColorsCommand[3]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuGroupYellow}"
                                                                                      Command="{Binding Path=ColorsCommand[4]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuGroupGray}"
                                                                                      Command="{Binding Path=ColorsCommand[5]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                        </ContextMenu>
                                                    </Border.ContextMenu>
                                                </Border>

                                                <Polyline Name="SelLine" StrokeThickness="2" Points="15, 0 15,15 0, 15 15, 0" VerticalAlignment="Bottom" HorizontalAlignment="Right" >
                                                    <Polyline.Fill>
                                                        <SolidColorBrush Color="{DynamicResource FBackColor}" />
                                                    </Polyline.Fill>
                                                    <Polyline.Stroke>
                                                        <SolidColorBrush Color="{DynamicResource FBackColor}" />
                                                    </Polyline.Stroke>
                                                </Polyline>
                                            </Grid>
                                            <ItemsControl Grid.Row="1" Grid.Column="1" Style="{x:Null}" ItemsSource="{Binding Path=NotesView}" MaxHeight="500" HorizontalContentAlignment="Stretch">
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate>
                                                        <Border Background="{Binding Path=Color}" MinWidth="130" BorderThickness="1" Margin="2">
                                                            <Grid>
                                                                <Grid.RowDefinitions>
                                                                    <RowDefinition Height="30" />
                                                                    <RowDefinition Height="Auto" />
                                                                </Grid.RowDefinitions>
                                                                <Border Style="{x:Null}" Height="30" Background="#01000000" BorderThickness="1" BorderBrush="White"
                                                                        Tag="{Binding RelativeSource={StaticResource WindowSource}}"
                                                                        bc:WindowDragEndDropBehaviour.SetItemsCommand="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.SetNoteCommand}"
                                                                        bc:WindowDragEndDropBehaviour.OnPoint="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=DataContext.OnPointCommand}"
                                                                        bc:WindowDragEndDropBehaviour.Stays="True"
                                                                        bc:WindowDragEndDropBehaviour.UseDrag="{x:Type drag:ItemNoteWindow}"
                                                                        bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}" >
                                                                    <StackPanel Orientation="Horizontal">
                                                                        <TextBlock Foreground="Black" Text="{Binding Path=CreateDate, StringFormat='dd.MM.yyyy'}" VerticalAlignment="Top" Margin="5" />
                                                                        <TextBlock Foreground="Black" Text="{Binding Path=CreateDate, StringFormat='HH:mm:ss'}" FontSize="10" VerticalAlignment="Top" Margin="-3, 3, 3, 3" />
                                                                    </StackPanel>
                                                                    <Border.ContextMenu>
                                                                        <ContextMenu>
                                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}" 
                                                                                      Header="{DynamicResource NotesPanelConMenuCreateTaskByNote}"
                                                                                      Command="{Binding Path=CreateTaskByNoteCommand}" >
                                                                                <MenuItem.CommandParameter>
                                                                                    <MultiBinding Converter="{StaticResource MultuValueConverter1}">
                                                                                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" Path="DataContext" />
                                                                                        <Binding Path="PlacementTarget.Tag" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" />
                                                                                    </MultiBinding>
                                                                                </MenuItem.CommandParameter>
                                                                            </MenuItem>
                                                                            <Separator />
                                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                        Header="{DynamicResource NotesPanelConMenuRemoveNote}" 
                                                                                        Command="{Binding Path=RemoveNoteCommand}"
                                                                                        CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuCopyNote}" ItemsSource="{Binding Path=NotesGroupsMenuCollectionView}" DisplayMemberPath="Item1" MaxHeight="200" >
                                                                                <MenuItem.ItemContainerStyle>
                                                                                    <Style TargetType="{x:Type MenuItem}">
                                                                                        <Setter Property="Command" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type MenuItem}}, Path=DataContext.CopyNoteCommand}" />
                                                                                        <Setter Property="CommandParameter">
                                                                                            <Setter.Value>
                                                                                                <MultiBinding Converter="{StaticResource MultuValueConverter1}">
                                                                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" Path="DataContext" />
                                                                                                    <Binding Path="Item2" />
                                                                                                </MultiBinding>
                                                                                            </Setter.Value>
                                                                                        </Setter>
                                                                                        <Setter Property="Background">
                                                                                            <Setter.Value>
                                                                                                <SolidColorBrush Color="{DynamicResource FBackColor}" />
                                                                                            </Setter.Value>
                                                                                        </Setter>
                                                                                        <Style.Triggers>
                                                                                            <DataTrigger Binding="{Binding Path=Item2}" Value="-1">
                                                                                                <Setter Property="Height" Value="0" />
                                                                                            </DataTrigger>
                                                                                        </Style.Triggers>
                                                                                    </Style>
                                                                                </MenuItem.ItemContainerStyle>
                                                                            </MenuItem>
                                                                            <Separator />
                                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuNoteBlue}"
                                                                                      Command="{Binding Path=ColorsCommand[0]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuNoteGreen}"
                                                                                      Command="{Binding Path=ColorsCommand[1]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuNotePink}"
                                                                                      Command="{Binding Path=ColorsCommand[2]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuNoteWhite}"
                                                                                      Command="{Binding Path=ColorsCommand[3]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuNoteYellow}"
                                                                                      Command="{Binding Path=ColorsCommand[4]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                                            <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:NotesViewModel}"
                                                                                      Header="{DynamicResource NotesPanelConMenuNoteGray}"
                                                                                      Command="{Binding Path=ColorsCommand[5]}"
                                                                                      CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" />
                                                                        </ContextMenu>
                                                                    </Border.ContextMenu>
                                                                </Border>

                                                                <ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" MinHeight="50" MinWidth="50">
                                                                    <controls:EditableTextBox bc:XamlToFlowDocumentBehaviour.DocumentXaml="{Binding Path=DText, Mode=TwoWay}"
                                                                                              VisibilityPanel="False"
                                                                                              ControlFilePanelVisible="False" 
                                                                                              AligenmentTextPanelVisible="False" 
                                                                                              FontTextPanelVisible="False" 
                                                                                              PrimitivyObjectPanelVisible="True"
                                                                                              ObjectControlPanelVisible="False"
                                                                                              MarkerPanelVisible="False" 
                                                                                              FlowDirection="LeftToRight"/>
                                                                </ScrollViewer>
                                                            </Grid>
                                                        </Border>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                                <ItemsControl.Template>
                                                    <ControlTemplate>
                                                        <ScrollViewer HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
                                                            <ItemsPresenter />
                                                        </ScrollViewer>
                                                    </ControlTemplate>
                                                </ItemsControl.Template>
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <StackPanel Orientation="Horizontal" bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={StaticResource WindowSource}, Path=(bc:WindowPositionBehaviour.WindowPosition)}" />
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                            </ItemsControl>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="SelLine" Property="Fill" >
                                                    <Setter.Value>
                                                        <SolidColorBrush Color="{DynamicResource SBackColor}" />
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter TargetName="SelLine" Property="Stroke" >
                                                    <Setter.Value>
                                                        <SolidColorBrush Color="{DynamicResource SBackColor}" />
                                                    </Setter.Value>
                                                </Setter>
                                            </Trigger>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter TargetName="SelLine" Property="Fill" Value="{x:Null}" />
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ListBox.ItemContainerStyle>
                    <bc:ExtendedTemplateBeahviour.Template>
                        <DataTemplate>
                            <Rectangle Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Width="50" Height="50">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                </Rectangle.Fill>
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="/ExtendedControl;component/Images/Bottom.png" />
                                </Rectangle.OpacityMask>
                            </Rectangle>
                            <DataTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="content" Property="Fill">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{DynamicResource SForeColor}" />
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </bc:ExtendedTemplateBeahviour.Template>
                </ListBox>
            </Grid>
        </Border>
    </ControlTemplate>
    <Style TargetType="{x:Type ContentControl}" x:Key="NotesPanelStyle" >
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{DynamicResource NotesPanelTemplate}" />
    </Style>

    <ControlTemplate x:Key="WaitTemplate">
        <Grid >
            <Grid.Triggers>
                <EventTrigger RoutedEvent="Loaded">
                    <BeginStoryboard >
                        <Storyboard RepeatBehavior="Forever">
                            <DoubleAnimation BeginTime="0:0:1" Storyboard.TargetName="RFE" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:1" Storyboard.TargetName="FR" Storyboard.TargetProperty="Angle" From="0" To="359" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:1" Storyboard.TargetName="FT" Storyboard.TargetProperty="X" From="-300" To="0" Duration="0:0:1" />

                            <DoubleAnimation BeginTime="0:0:0.5" Storyboard.TargetName="SE" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:0.5" Storyboard.TargetName="SR" Storyboard.TargetProperty="Angle" From="0" To="359" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:0.5" Storyboard.TargetName="ST" Storyboard.TargetProperty="X" From="-300" To="0" Duration="0:0:1" />

                            <DoubleAnimation Storyboard.TargetName="TE" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:1" />
                            <DoubleAnimation Storyboard.TargetName="TR" Storyboard.TargetProperty="Angle" From="0" To="359" Duration="0:0:1" />
                            <DoubleAnimation Storyboard.TargetName="TT" Storyboard.TargetProperty="X" From="-300" To="0" Duration="0:0:1" />


                            <DoubleAnimation BeginTime="0:0:3" Storyboard.TargetName="RFE" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:3" Storyboard.TargetName="FR" Storyboard.TargetProperty="Angle" From="0" To="359" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:3" Storyboard.TargetName="FT" Storyboard.TargetProperty="X" From="0" To="300" Duration="0:0:1" />

                            <DoubleAnimation BeginTime="0:0:2.5" Storyboard.TargetName="SE" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:2.5" Storyboard.TargetName="SR" Storyboard.TargetProperty="Angle" From="0" To="359" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:2.5" Storyboard.TargetName="ST" Storyboard.TargetProperty="X" From="0" To="300" Duration="0:0:1" />

                            <DoubleAnimation BeginTime="0:0:2" Storyboard.TargetName="TE" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:2" Storyboard.TargetName="TR" Storyboard.TargetProperty="Angle" From="0" To="359" Duration="0:0:1" />
                            <DoubleAnimation BeginTime="0:0:2" Storyboard.TargetName="TT" Storyboard.TargetProperty="X" From="0" To="300" Duration="0:0:1" />
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Grid.Triggers>
            <Rectangle Fill="DodgerBlue" Width="20" Name="RFE" Height="20" Margin="-44, 0, 0, 0" Opacity="0" >
                <Rectangle.RenderTransform>
                    <TransformGroup>
                        <RotateTransform x:Name="FR" CenterX="10" CenterY="10" Angle="45" />
                        <TranslateTransform x:Name="FT" />
                    </TransformGroup>
                </Rectangle.RenderTransform>
            </Rectangle>
            <Rectangle Fill="DodgerBlue" Width="20" Name="SE" Height="20" Opacity="0" >
                <Rectangle.RenderTransform>
                    <TransformGroup>
                        <RotateTransform x:Name="SR" CenterX="10" CenterY="10" Angle="45" />
                        <TranslateTransform x:Name="ST" />
                    </TransformGroup>
                </Rectangle.RenderTransform>
            </Rectangle>
            <Rectangle Fill="DodgerBlue" Width="20" Name="TE" Height="20" Opacity="0" Margin="44, 0, 0, 0">
                <Rectangle.RenderTransform>
                    <TransformGroup>
                        <RotateTransform x:Name="TR" CenterX="10" CenterY="10" Angle="45" />
                        <TranslateTransform x:Name="TT" />
                    </TransformGroup>
                </Rectangle.RenderTransform>
            </Rectangle>
        </Grid>
    </ControlTemplate>

    <ContextMenu x:Key="taskItemContextMenu">
        <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Header="{DynamicResource TaskPanelRemoveTask}" Command="{Binding Path=RemoveTaskCommand}" 
                                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" 
                                                                  bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN"
                                                                  bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=CurrentUser.Role.DeleteTask}" />
        <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Header="{DynamicResource TaskPanelEditTask}" Command="{Binding Path=EditTaskCommand}"
                                                                  bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN"
                                                                  bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=CurrentUser.Role.UpdateInfoTask}" >
            <MenuItem.CommandParameter>
                <MultiBinding Converter="{StaticResource MultuValueConverter1}">
                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" Path="DataContext" />
                    <Binding Path="PlacementTarget.Tag" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" />
                </MultiBinding>
            </MenuItem.CommandParameter>
        </MenuItem>
        <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Header="{DynamicResource TaskPanelCopyTask}" Command="{Binding Path=CopyTaskCommand}"
                                                                          bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN"
                                                                          bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=CurrentUser.Role.CreateTask}">
            <MenuItem.CommandParameter>
                <MultiBinding Converter="{StaticResource MultuValueConverter1}">
                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" Path="DataContext" />
                    <Binding Path="PlacementTarget.Tag" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" />
                </MultiBinding>
            </MenuItem.CommandParameter>
        </MenuItem>
    </ContextMenu>
    
    <DataTemplate x:Key="TaskItemDataTemplate">
        <Border Name="BackTask" Style="{x:Null}" Margin="3" Tag="{Binding RelativeSource={StaticResource WindowSource}}" ContextMenu="{StaticResource taskItemContextMenu}">
            <Grid >
                <TextElement.Foreground>
                    <SolidColorBrush Color="White" />
                </TextElement.Foreground>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="30" />
                    <ColumnDefinition />
                    <ColumnDefinition Width="30" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                </Grid.RowDefinitions>
                <Polygon Name="PriorityPolygon" Points="0,0 30, 0 0,30" Fill="DarkViolet" bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True">
                    <Polygon.ToolTip>
                        <ToolTip Background="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Fill}">
                            <TextBlock Text="{Binding Path=PrioretyString, IsAsync=True}" />
                        </ToolTip>
                    </Polygon.ToolTip>
                </Polygon>
                <TextBlock Grid.Column="1" FontWeight="Bold" Text="{Binding Path=MinCaption}" VerticalAlignment="Center" bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True" />
                <Polygon Name="IsStartExecutionTaskPolygon" Grid.ColumnSpan="3" HorizontalAlignment="Right" Points="0,0 30,0 30,30" Fill="Yellow" Opacity="0" >
                    <Polygon.ToolTip>
                        <ToolTip >
                            <TextBlock Text="{DynamicResource TaskPanelStateTask}" />
                        </ToolTip>
                    </Polygon.ToolTip>
                </Polygon>
                <Polygon Name="IsExecutionTaskPolygon" Grid.ColumnSpan="3" HorizontalAlignment="Right" Points="0,0 30,0 30,30" Fill="Green" Opacity="0" bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True" >
                    <Polygon.ToolTip>
                        <ToolTip >
                            <TextBlock Text="{DynamicResource TaskPanelStateTask}" />
                        </ToolTip>
                    </Polygon.ToolTip>
                </Polygon>
                <ToggleButton Content="А" Height="30" Grid.Row="1"  />
                <TextBlock Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" FontWeight="Bold" Text="{Binding Path=DateOnLine, IsAsync=True}" bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True" />
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsStartExecutionByTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="True">
                <Setter TargetName="IsStartExecutionTaskPolygon" Property="Opacity" Value="1" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsExecutionTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="True">
                <Setter TargetName="IsExecutionTaskPolygon" Property="Opacity" Value="1" />
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=TypeTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="1" >
                <Setter TargetName="BackTask" Property="Background" >
                    <Setter.Value>
                        <SolidColorBrush Color="Olive" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=TypeTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="2" >
                <Setter TargetName="BackTask" Property="Background" >
                    <Setter.Value>
                        <SolidColorBrush Color="DarkGoldenrod" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=TypeTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="3" >
                <Setter TargetName="BackTask" Property="Background" >
                    <Setter.Value>
                        <SolidColorBrush Color="DodgerBlue" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=TypeTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="4" >
                <Setter TargetName="BackTask" Property="Background" >
                    <Setter.Value>
                        <SolidColorBrush Color="Maroon" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="0">
                <Setter TargetName="PriorityPolygon" Property="Fill" >
                    <Setter.Value>
                        <SolidColorBrush Color="Plum" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="1">
                <Setter TargetName="PriorityPolygon" Property="Fill" >
                    <Setter.Value>
                        <SolidColorBrush Color="SlateBlue" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="2">
                <Setter TargetName="PriorityPolygon" Property="Fill" >
                    <Setter.Value>
                        <SolidColorBrush Color="Purple" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="3">
                <Setter TargetName="PriorityPolygon" Property="Fill" >
                    <Setter.Value>
                        <SolidColorBrush Color="MediumVioletRed" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="4">
                <Setter TargetName="PriorityPolygon" Property="Fill" >
                    <Setter.Value>
                        <SolidColorBrush Color="Indigo" />
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="CommonComment">
        <Border Style="{DynamicResource SecondBorder}" HorizontalAlignment="Left" Margin="3, 3, 20, 3">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <TextBlock Text="{Binding Path=CreaterName}" Padding="3" Style="{DynamicResource H6}" />

                <TextBlock Grid.Row="1" Text="{Binding Commentary}" TextWrapping="Wrap" Margin="10" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="SystemComment">
        <Border Style="{DynamicResource TreeBorder}" HorizontalAlignment="Left" Margin="3, 3, 20, 3">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock Text="{Binding CommentaryBody}" TextWrapping="Wrap" Margin="10" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MyCommonComment">
        <Border Style="{DynamicResource SecondBorder}" HorizontalAlignment="Right" Margin="20, 3, 3, 3">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <TextBlock Text="{Binding Path=CreaterName}" HorizontalAlignment="Right" Padding="3" Style="{DynamicResource H6}" />

                <TextBlock Grid.Row="1" Text="{Binding Commentary}" TextWrapping="Wrap" Margin="10" HorizontalAlignment="Right" />
            </Grid>
        </Border>
    </DataTemplate>

    <DataTemplate x:Key="MySystemComment">
        <Border Style="{DynamicResource TreeBorder}" HorizontalAlignment="Right" Margin="20, 3, 3, 3">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock Text="{Binding CommentaryBody}" TextWrapping="Wrap" Margin="10" HorizontalAlignment="Right" />
            </Grid>
        </Border>
    </DataTemplate>
    
    <ControlTemplate x:Key="TasksPanelTemplate">
        <ControlTemplate.Resources>
            <c:ResourceStringFormatConverter x:Key="ResourceStringFormatConverter1"/>
        </ControlTemplate.Resources>
        <Border >
            <Grid bc:GridDefinitionBehaviour.ParentPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                <bc:GridDefinitionBehaviour.GridDefinitions>
                    <GridLength>Auto</GridLength>
                    <GridLength>*</GridLength>
                    <GridLength>Auto</GridLength>
                </bc:GridDefinitionBehaviour.GridDefinitions>

                <Grid >
                    <Grid.RowDefinitions >
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <Button Command="{Binding Path=CreateTaskCommand}" 
                        CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                        bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=CurrentUser.Role.CreateTask}" 
                        bc:VisibilityOnNullBehaviour.OriginalSize="NaN, 50">
                        <Button.ToolTip>
                            <ToolTip>
                                <TextBlock Text="{DynamicResource TaskPanelCreateTask}" />
                            </ToolTip>
                        </Button.ToolTip>
                        <Button.Content>
                            <Rectangle Width="50" Height="50" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <Rectangle.Fill>
                                    <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                </Rectangle.Fill>
                                <Rectangle.OpacityMask>
                                    <ImageBrush ImageSource="/ExtendedControl;component/Images/CreateTask.png" />
                                </Rectangle.OpacityMask>
                            </Rectangle>
                        </Button.Content>
                    </Button>

                    <ComboBox Grid.Row="1" Height="30" DisplayMemberPath="Name" SelectedValuePath="Value" ItemsSource="{DynamicResource TypeVisualTaskData}" SelectedValue="{Binding Path=SelectionVisualType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />

                    <Grid Grid.Row="2" Width="200">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <DatePicker SelectedDate="{Binding BeginDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                        <DatePicker Grid.Column="1" SelectedDate="{Binding EndDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    </Grid>

                    <controls:SearchBox Grid.Row="3" Width="200" HorizontalAlignment="Right" SearchText="{Binding Path=SearchText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>

                <ContentControl Grid.Column="1" Grid.Row="1" FlowDirection="LeftToRight">
                    <ContentControl.Style>
                        <Style TargetType="{x:Type ContentControl}">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <ListBox Grid.Column="1" Grid.Row="1" FlowDirection="LeftToRight"
                                            ItemsSource="{Binding Path=TaskCollectionView}"
                                            SelectedItem="{Binding Path=SelectedTask, Mode=TwoWay, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" HorizontalContentAlignment="Stretch"
                                            bc:ListBoxselectionBehaviour.OnlyLeftselection="True" IsSynchronizedWithCurrentItem="False">
                                            <ListBox.Resources>
                                                <SolidColorBrush Color="{DynamicResource FForeColor}" x:Key="BorderBR" />
                                                <SolidColorBrush Color="{DynamicResource SForeColor}" x:Key="BorderBRS" />
                                                <SolidColorBrush Color="{DynamicResource TBackColor}" x:Key="BorderBRT" />
                                            </ListBox.Resources>
                                            <ListBox.ItemContainerStyle>
                                                <Style TargetType="{x:Type ListBoxItem}">
                                                    <Setter Property="bc:ItemsControlExtantionalBehaviour.UseUnselection" Value="True" />
                                                    <Setter Property="Template">
                                                        <Setter.Value >
                                                            <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                                                <Border Name="Back" Margin="5, 5, 2, 5" Style="{x:Null}" VerticalAlignment="Center">
                                                                    <Border.BorderBrush>
                                                                        <SolidColorBrush Color="{DynamicResource SBackColor}" />
                                                                    </Border.BorderBrush>
                                                                    <Grid>
                                                                        <Grid Height="60" >
                                                                            <Border Name="BackTask" Style="{x:Null}" Margin="3" MinWidth="200" Tag="{Binding RelativeSource={StaticResource WindowSource}}"
                                                                                    bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                                                                <Border.ContextMenu>
                                                                                    <ContextMenu >
                                                                                        <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Header="{DynamicResource TaskPanelRemoveTask}" Command="{Binding Path=RemoveTaskCommand}" 
                                                                  CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=DataContext}" 
                                                                  bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN"
                                                                  bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=CurrentUser.Role.DeleteTask}" />
                                                                                        <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Header="{DynamicResource TaskPanelEditTask}" Command="{Binding Path=EditTaskCommand}"
                                                                  bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN"
                                                                  bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=CurrentUser.Role.UpdateInfoTask}" >
                                                                                            <MenuItem.CommandParameter>
                                                                                                <MultiBinding Converter="{StaticResource MultuValueConverter1}">
                                                                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" Path="DataContext" />
                                                                                                    <Binding Path="PlacementTarget.Tag" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" />
                                                                                                </MultiBinding>
                                                                                            </MenuItem.CommandParameter>
                                                                                        </MenuItem>
                                                                                        <MenuItem b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Header="{DynamicResource TaskPanelCopyTask}" Command="{Binding Path=CopyTaskCommand}"
                                                                          bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN"
                                                                          bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=CurrentUser.Role.CreateTask}">
                                                                                            <MenuItem.CommandParameter>
                                                                                                <MultiBinding Converter="{StaticResource MultuValueConverter1}">
                                                                                                    <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" Path="DataContext" />
                                                                                                    <Binding Path="PlacementTarget.Tag" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}" />
                                                                                                </MultiBinding>
                                                                                            </MenuItem.CommandParameter>
                                                                                        </MenuItem>
                                                                                    </ContextMenu>
                                                                                </Border.ContextMenu>
                                                                                <Grid >
                                                                                    <TextElement.Foreground>
                                                                                        <SolidColorBrush Color="White" />
                                                                                    </TextElement.Foreground>
                                                                                    <Grid.ColumnDefinitions>
                                                                                        <ColumnDefinition Width="30" />
                                                                                        <ColumnDefinition />
                                                                                        <ColumnDefinition Width="30" />
                                                                                    </Grid.ColumnDefinitions>
                                                                                    <Grid.RowDefinitions>
                                                                                        <RowDefinition />
                                                                                        <RowDefinition />
                                                                                    </Grid.RowDefinitions>
                                                                                    <Polygon Name="PriorityPolygon" Points="0,0 30, 0 0,30" Fill="DarkViolet" bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True">
                                                                                        <Polygon.ToolTip>
                                                                                            <ToolTip Background="{Binding RelativeSource={RelativeSource Mode=Self}, Path=PlacementTarget.Fill}">
                                                                                                <TextBlock Text="{Binding Path=PrioretyString, IsAsync=True}" />
                                                                                            </ToolTip>
                                                                                        </Polygon.ToolTip>
                                                                                    </Polygon>
                                                                                    <TextBlock Grid.Column="1" FontWeight="Bold" Text="{Binding Path=MinCaption}" VerticalAlignment="Center" bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True" />
                                                                                    <Polygon Name="IsStartExecutionTaskPolygon" Grid.ColumnSpan="3" HorizontalAlignment="Right" Points="0,0 30,0 30,30" Fill="Yellow" Opacity="0" >
                                                                                        <Polygon.ToolTip>
                                                                                            <ToolTip >
                                                                                                <TextBlock Text="{DynamicResource TaskPanelIsStartExecution}" />
                                                                                            </ToolTip>
                                                                                        </Polygon.ToolTip>
                                                                                    </Polygon>
                                                                                    <Polygon Name="IsExecutionTaskPolygon" Grid.ColumnSpan="3" HorizontalAlignment="Right" Points="0,0 30,0 30,30" Fill="Green" Opacity="0" bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True" >
                                                                                        <Polygon.ToolTip>
                                                                                            <ToolTip >
                                                                                                <TextBlock Text="{DynamicResource TaskPanelIsFinalyExecution}" />
                                                                                            </ToolTip>
                                                                                        </Polygon.ToolTip>
                                                                                    </Polygon>
                                                                                    <Border Width="30" Height="30" Grid.Row="1" >
                                                                                        <Border.OpacityMask>
                                                                                            <ImageBrush ImageSource="/ExtendedControl;component/Images/FavoritesBack.png" />
                                                                                        </Border.OpacityMask>
                                                                                        <Border.RenderTransform>
                                                                                            <TranslateTransform X="-13" Y="10" />
                                                                                        </Border.RenderTransform>
                                                                                    </Border>
                                                                                    <ToggleButton Height="30" Width="30" Grid.Row="1" IsChecked="{Binding Path=IsFavorite, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                                                                                        <ToggleButton.OpacityMask>
                                                                                            <ImageBrush ImageSource="/ExtendedControl;component/Images/Favorites.png" />
                                                                                        </ToggleButton.OpacityMask>
                                                                                        <ToggleButton.RenderTransform>
                                                                                            <TranslateTransform X="-13" Y="10" />
                                                                                        </ToggleButton.RenderTransform>
                                                                                        <ToggleButton.ToolTip>
                                                                                            <ToolTip>
                                                                                                <TextBlock Text="{DynamicResource TaskPanelItemFavorites}" />
                                                                                            </ToolTip>
                                                                                        </ToggleButton.ToolTip>
                                                                                    </ToggleButton>
                                                                                    <TextBlock Grid.Row="1" Grid.Column="1" Grid.ColumnSpan="2" FontWeight="Bold" Text="{Binding Path=DateOnLine, IsAsync=True}" bc:ItemsControlExtantionalBehaviour.OnActiveUnselection="True" />
                                                                                </Grid>
                                                                            </Border>
                                                                        </Grid>
                                                                    </Grid>
                                                                </Border>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsSelected" Value="True">
                                                                        <Setter TargetName="Back" Property="Border.BorderThickness" Value="2" />
                                                                    </Trigger>

                                                                    <DataTrigger Binding="{Binding Path=IsStartExecutionByTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                                        <Setter TargetName="IsStartExecutionTaskPolygon" Property="Opacity" Value="1" />
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=IsExecutionTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                                        <Setter TargetName="IsExecutionTaskPolygon" Property="Opacity" Value="1" />
                                                                    </DataTrigger>

                                                                    <DataTrigger Binding="{Binding Path=TypeTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="1" >
                                                                        <Setter TargetName="BackTask" Property="Background" >
                                                                            <Setter.Value>
                                                                                <SolidColorBrush Color="Olive" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=TypeTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="2" >
                                                                        <Setter TargetName="BackTask" Property="Background" >
                                                                            <Setter.Value>
                                                                                <SolidColorBrush Color="DarkGoldenrod" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=TypeTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="3" >
                                                                        <Setter TargetName="BackTask" Property="Background" >
                                                                            <Setter.Value>
                                                                                <SolidColorBrush Color="DodgerBlue" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=TypeTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="4" >
                                                                        <Setter TargetName="BackTask" Property="Background" >
                                                                            <Setter.Value>
                                                                                <SolidColorBrush Color="Maroon" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>

                                                                    <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="0">
                                                                        <Setter TargetName="PriorityPolygon" Property="Fill" >
                                                                            <Setter.Value>
                                                                                <SolidColorBrush Color="Plum" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="1">
                                                                        <Setter TargetName="PriorityPolygon" Property="Fill" >
                                                                            <Setter.Value>
                                                                                <SolidColorBrush Color="SlateBlue" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="2">
                                                                        <Setter TargetName="PriorityPolygon" Property="Fill" >
                                                                            <Setter.Value>
                                                                                <SolidColorBrush Color="Purple" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="3">
                                                                        <Setter TargetName="PriorityPolygon" Property="Fill" >
                                                                            <Setter.Value>
                                                                                <SolidColorBrush Color="MediumVioletRed" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding Path=PriorityTask, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" Value="4">
                                                                        <Setter TargetName="PriorityPolygon" Property="Fill" >
                                                                            <Setter.Value>
                                                                                <SolidColorBrush Color="Indigo" />
                                                                            </Setter.Value>
                                                                        </Setter>
                                                                    </DataTrigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </Setter.Value>
                                                    </Setter>
                                                </Style>
                                            </ListBox.ItemContainerStyle>
                                            <bc:ExtendedTemplateBeahviour.Template>
                                                <DataTemplate>
                                                    <Rectangle Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Width="50" Height="50">
                                                        <Rectangle.Fill>
                                                            <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                                        </Rectangle.Fill>
                                                        <Rectangle.OpacityMask>
                                                            <ImageBrush ImageSource="/ExtendedControl;component/Images/Bottom.png" />
                                                        </Rectangle.OpacityMask>
                                                    </Rectangle>
                                                    <DataTemplate.Triggers>
                                                        <Trigger Property="IsMouseOver" Value="True">
                                                            <Setter TargetName="content" Property="Fill">
                                                                <Setter.Value>
                                                                    <SolidColorBrush Color="{DynamicResource SForeColor}" />
                                                                </Setter.Value>
                                                            </Setter>
                                                        </Trigger>
                                                    </DataTemplate.Triggers>
                                                </DataTemplate>
                                            </bc:ExtendedTemplateBeahviour.Template>
                                        </ListBox>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsCalendar}" Value="True">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <ControlTemplate.Resources>
                                                    <Style TargetType="{x:Type Border}" />
                                                    <Style TargetType="{x:Type ItemsControl}" />
                                                    <Style TargetType="{x:Type ScrollViewer}" />
                                                </ControlTemplate.Resources>
                                                <v:CalendarPanel ItemWidth="50" ItemHeight="60" 
                                                                 RowLineColor="{DynamicResource FForeColor}" 
                                                                 ColumnLineColor="{DynamicResource FForeColor}" 
                                                                 ShowDatePanel="False" 
                                                                 DataSource="{Binding Path=Tasks}"
                                                                 StartDate="{Binding BeginDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                 EndDate="{Binding EndDate, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                                                 WaitLayerTemplate="{StaticResource WaitTemplate}" 
                                                                 TopMarging="110" 
                                                                 LeftMarging="100"
                                                                 DataItemTemplate="{StaticResource TaskItemDataTemplate}"
                                                                 SelectedData="{Binding Path=SelectedTask, Mode=TwoWay, IsAsync=True, UpdateSourceTrigger=PropertyChanged}">
                                                    <v:CalendarPanel.RowHeaderTemplate>
                                                        <DataTemplate>
                                                            <Border Style="{DynamicResource SecondBorder}" Width="100">
                                                                <TextBlock Style="{DynamicResource H5}" TextWrapping="Wrap" Text="{Binding .}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5, 0, 0, 0"/>
                                                            </Border>
                                                        </DataTemplate>
                                                    </v:CalendarPanel.RowHeaderTemplate>
                                                    <v:CalendarPanel.ColumnHeaderTemplateSelector>
                                                        <selv:DateWeekTemplateSelector>
                                                            <selv:DateWeekTemplateSelector.DayTemplate>
                                                                <DataTemplate>
                                                                    <Border Style="{DynamicResource SecondBorder}" >
                                                                        <TextBlock Style="{DynamicResource H5}" Text="{Binding ., StringFormat=\{0:dd.MM.yyyy\}}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5, 0, 0, 0"/>
                                                                    </Border>
                                                                </DataTemplate>
                                                            </selv:DateWeekTemplateSelector.DayTemplate>
                                                            <selv:DateWeekTemplateSelector.WeekTemplate>
                                                                <DataTemplate>
                                                                    <Border >
                                                                        <Grid Background="Maroon" HorizontalAlignment="Stretch">
                                                                            <TextBlock Style="{DynamicResource H5}" Foreground="White" FontWeight="Bold" Text="{Binding ., StringFormat=\{0:dd.MM.yyyy\}}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5, 0, 0, 0"/>
                                                                        </Grid>
                                                                    </Border>
                                                                </DataTemplate>
                                                            </selv:DateWeekTemplateSelector.WeekTemplate>
                                                            <selv:DateWeekTemplateSelector.CurrentTemplate>
                                                                <DataTemplate>
                                                                    <Border >
                                                                        <Grid Background="DodgerBlue" HorizontalAlignment="Stretch">
                                                                            <TextBlock Style="{DynamicResource H5}" Foreground="White" FontWeight="Bold" Text="{Binding ., StringFormat=\{0:dd.MM.yyyy\}}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5, 0, 0, 0"/>
                                                                        </Grid>
                                                                    </Border>
                                                                </DataTemplate>
                                                            </selv:DateWeekTemplateSelector.CurrentTemplate>
                                                            <selv:DateWeekTemplateSelector.YearTemplate>
                                                                <DataTemplate>
                                                                    <Border Style="{DynamicResource SecondBorder}">
                                                                        <Grid HorizontalAlignment="Stretch">
                                                                            <TextBlock Style="{DynamicResource H5}" Text="{Binding .}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5, 0, 0, 0"/>
                                                                        </Grid>
                                                                    </Border>
                                                                </DataTemplate>
                                                            </selv:DateWeekTemplateSelector.YearTemplate>
                                                            <selv:DateWeekTemplateSelector.MontTemplate>
                                                                <DataTemplate>
                                                                    <Border Style="{DynamicResource SecondBorder}">
                                                                        <Grid HorizontalAlignment="Stretch">
                                                                            <TextBlock Style="{DynamicResource H5}" Text="{Binding .}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="5, 0, 0, 0"/>
                                                                        </Grid>
                                                                    </Border>
                                                                </DataTemplate>
                                                            </selv:DateWeekTemplateSelector.MontTemplate>
                                                        </selv:DateWeekTemplateSelector>
                                                    </v:CalendarPanel.ColumnHeaderTemplateSelector>
                                                    <i:Interaction.Triggers>
                                                        <i:EventTrigger EventName="Loaded">
                                                            <i:InvokeCommandAction Command="{Binding Path=LoadedCalendarCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type v:CalendarPanel}}}" />
                                                        </i:EventTrigger>
                                                    </i:Interaction.Triggers>
                                                </v:CalendarPanel>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ContentControl.Style>
                </ContentControl>

                <Popup Grid.Column="1" Grid.Row="1" StaysOpen="True"
                   IsOpen="{Binding Path=IsSelectedTask, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                   bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}" >
                    <Border Width="Auto" MinWidth="200" MinHeight="200"
                        bc:MenuActivationBehaviour.Position="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}"
                        bc:PopupPanelBehaviour.TargetPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}" >
                        <Border BorderThickness="1">
                            <Border.BorderBrush>
                                <SolidColorBrush Color="{DynamicResource TBackColor}" />
                            </Border.BorderBrush>
                            <WrapPanel bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                <Expander IsExpanded="True" 
                                          bc:GlobalPercentageFrameworkElementBehaviour.Type="Max"
                                          bc:GlobalPercentageFrameworkElementBehaviour.UsePosition="True" 
                                          bc:GlobalPercentageFrameworkElementBehaviour.Procentage="50">
                                    <Expander.Header>
                                        <Border Style="{DynamicResource TreeBorder}" BorderThickness="2, 0, 0, 0">
                                            <TextBlock Text="{DynamicResource TaskPanelMainInfo}" Style="{DynamicResource H4}" VerticalAlignment="Center" Margin="10, 5, 5, 5" />
                                        </Border>
                                    </Expander.Header>
                                    <Border Style="{x:Null}" bc:FrameworkElementPositionBehaviour.PanelSize="300" 
                                          bc:FrameworkElementPositionBehaviour.PanelPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                        <Grid >
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="*" />
                                            </Grid.RowDefinitions>
                                            <TextBox Name="CaptionTaskBox" Text="{Binding Path=SelectedTask.Caption, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" IsReadOnly="True" FontWeight="Bold" FontSize="12" Style="{DynamicResource ReadOnlyTextBoxStyle}" />

                                            <FlowDocumentScrollViewer Grid.Row="1" Margin="0, 20, 0, 0" bc:XamlToFlowDocumentBehaviour.DocumentXaml="{Binding Path=SelectedTask.Text, IsAsync=True, Mode=TwoWay}" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" />

                                            <ToggleButton Grid.Row="1" Name="FullSizebutton" Width="20" Height="20" HorizontalAlignment="Left" VerticalAlignment="Top" >
                                                <Rectangle Name="content" HorizontalAlignment="Center" VerticalAlignment="Center" Width="20" Height="20">
                                                    <Rectangle.Fill>
                                                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                                    </Rectangle.Fill>
                                                    <Rectangle.OpacityMask>
                                                        <ImageBrush ImageSource="/ExtendedControl;component/Images/More.png" />
                                                    </Rectangle.OpacityMask>
                                                </Rectangle>
                                            </ToggleButton>

                                            <Popup StaysOpen="False" Height="Auto" Width="Auto" MaxHeight="500"
                                           PlacementTarget="{Binding ElementName=FullSizebutton}" 
                                           IsOpen="{Binding ElementName=FullSizebutton, Path=IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                                                <Border BorderThickness="1">
                                                    <Border.BorderBrush>
                                                        <SolidColorBrush Color="{DynamicResource TBackColor}" />
                                                    </Border.BorderBrush>
                                                    <FlowDocumentScrollViewer Grid.Row="2" bc:XamlToFlowDocumentBehaviour.DocumentXaml="{Binding Path=SelectedTask.Text, IsAsync=True, Mode=TwoWay}" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" />
                                                </Border>
                                            </Popup>
                                        </Grid>
                                    </Border>
                                </Expander>
                                <Expander IsExpanded="True" >
                                    <Expander.Header>
                                        <Border Style="{DynamicResource TreeBorder}" BorderThickness="2, 0, 0, 0">
                                            <TextBlock Text="{DynamicResource TaskPanelParametry}" Margin="10, 5, 5, 5" Style="{DynamicResource H4}" />
                                        </Border>
                                    </Expander.Header>
                                    <Border Style="{x:Null}" bc:FrameworkElementPositionBehaviour.PanelSize="300" 
                                          bc:FrameworkElementPositionBehaviour.PanelPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                        <WrapPanel Orientation="Vertical">
                                            <StackPanel Margin="5" Orientation="Vertical" Width="160">
                                                <TextBlock Text="{DynamicResource TaskPanelProject}" VerticalAlignment="Center" Style="{DynamicResource H6}" />
                                                <TextBlock Margin="20, 0, 0, 0" Text="{Binding Path=SelectedTask.ProjectString, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" />
                                            </StackPanel>
                                            <StackPanel Margin="5" Orientation="Vertical" Width="160">
                                                <TextBlock Text="{DynamicResource TaskPanelType}" VerticalAlignment="Center" Style="{DynamicResource H6}" />
                                                <TextBlock Margin="20, 0, 0, 0" Text="{Binding Path=SelectedTask.TypeString, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" />
                                            </StackPanel>
                                            <StackPanel Margin="5" Orientation="Vertical" Width="160">
                                                <TextBlock Text="{DynamicResource TaskPanelPriorety}" VerticalAlignment="Center" Style="{DynamicResource H6}" />
                                                <TextBlock Margin="20, 0, 0, 0" Text="{Binding Path=SelectedTask.PrioretyString, IsAsync=True, UpdateSourceTrigger=PropertyChanged}" />
                                            </StackPanel>
                                            <StackPanel Margin="5" Orientation="Vertical" Width="160">
                                                <TextBlock Text="{DynamicResource TaskPanelCreateDate}" VerticalAlignment="Center" Style="{DynamicResource H6}" />
                                                <TextBlock Margin="20, 0, 0, 0" Text="{Binding Path=SelectedTask.OpenDate, IsAsync=True, StringFormat='dd.MM.yyyy г. HH:mm:ss', UpdateSourceTrigger=PropertyChanged}" />
                                            </StackPanel>
                                            <StackPanel Margin="5" Orientation="Vertical" Width="160">
                                                <TextBlock Text="{DynamicResource TaskPanelDeadline}" VerticalAlignment="Center" Style="{DynamicResource H6}" />
                                                <TextBlock Margin="20, 0, 0, 0" Text="{Binding Path=SelectedTask.EndDate, IsAsync=True, StringFormat='dd.MM.yyyy г. HH:mm:ss', UpdateSourceTrigger=PropertyChanged}" />
                                            </StackPanel>
                                        </WrapPanel>
                                    </Border>
                                </Expander>
                                <Expander 
                                          bc:GlobalPercentageFrameworkElementBehaviour.Type="Max"
                                          bc:GlobalPercentageFrameworkElementBehaviour.UsePosition="True" 
                                          bc:GlobalPercentageFrameworkElementBehaviour.Procentage="50"
                                          IsExpanded="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.ShowFilePanel, IsAsync=True, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                    <Expander.Header>
                                        <Border Style="{DynamicResource TreeBorder}" BorderThickness="2, 0, 0, 0">
                                            <Grid >
                                                <TextBlock Margin="10, 5, 5, 5" Style="{DynamicResource H4}" Text="{Binding Path=SelectedTask.TaskFiles.Count, IsAsync=True, Converter={StaticResource ResourceStringFormatConverter1}, ConverterParameter=TaskPanelAttachedFiles}" TextWrapping="Wrap" />
                                            </Grid>
                                        </Border>
                                    </Expander.Header>
                                    <Border Style="{x:Null}" bc:FrameworkElementPositionBehaviour.PanelSize="300" 
                                          bc:FrameworkElementPositionBehaviour.PanelPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                        <Grid>
                                            <Grid.RowDefinitions >
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition Height="*" />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <Grid bc:FlowDirectionOnPositionBehaviour.NegativePosition="{Binding RelativeSource={StaticResource WindowSource}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                                <TextBlock Grid.Row="1" Style="{DynamicResource H4}" Text="{Binding Path=SelectedTask.FileCollectionView.Count, IsAsync=True, Converter={StaticResource ResourceStringFormatConverter1}, ConverterParameter=TaskPanelFiles}" VerticalAlignment="Center" HorizontalAlignment="Left" FlowDirection="LeftToRight" Margin="10, 0" />
                                            </Grid>
                                            <controls:SearchBox SearchText="{Binding Path=SelectedTask.SearchTextFiles, IsAsync=True, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" FlowDirection="RightToLeft" />
                                            <ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Margin="3">
                                                <ItemsControl ItemsSource="{Binding Path=SelectedTask.FileCollectionView, IsAsync=True}" Style="{x:Null}" >
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate>
                                                            <Border Margin="3" Style="{DynamicResource SecondBorder}" MinWidth="170">
                                                                <Grid Height="30" >
                                                                    <Grid.ColumnDefinitions>
                                                                        <ColumnDefinition Width="*" />
                                                                        <ColumnDefinition Width="30" />
                                                                    </Grid.ColumnDefinitions>
                                                                    <TextBlock Text="{Binding Path=OriginalName, IsAsync=True}" Style="{DynamicResource H6}" Margin="5" />
                                                                    <Button Grid.Column="1" b:ViewModelIjection.ViewModel="{x:Type vm:TasksViewModel}" Content="L" 
                                                                        Command="{Binding Path=DownloadFileCommand}"
                                                                        CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Grid}}, Path=DataContext}">
                                                                        <Button.ToolTip>
                                                                            <ToolTip>
                                                                                <TextBlock Text="{DynamicResource TaskPanelDownloadAttachedFile}" />
                                                                            </ToolTip>
                                                                        </Button.ToolTip>
                                                                    </Button>
                                                                </Grid>
                                                            </Border>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <WrapPanel Orientation="Vertical" IsItemsHost="True" />
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                </ItemsControl>
                                            </ScrollViewer>
                                            <Button Grid.Row="2" Content="{DynamicResource TaskPanelDownloadAllFiles}" 
                                            bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=SelectedTask.ThereAreFiles, IsAsync=True}"
                                            bc:VisibilityOnNullBehaviour.OriginalSize="NaN, 30"
                                            Command="{Binding Path=DownloadAllCommand}" 
                                            CommandParameter="{Binding Path=SelectedTask.TaskFiles}"/>
                                        </Grid>
                                    </Border>
                                </Expander>
                                <Expander 
                                          bc:GlobalPercentageFrameworkElementBehaviour.Type="Max"
                                          bc:GlobalPercentageFrameworkElementBehaviour.UsePosition="True" 
                                          bc:GlobalPercentageFrameworkElementBehaviour.Procentage="50"
                                          IsExpanded="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.ShowPerfomerPanel, IsAsync=True, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                    <Expander.Header>
                                        <Border Style="{DynamicResource TreeBorder}" BorderThickness="2, 0, 0, 0">
                                            <TextBlock Text="{Binding Path=SelectedTask.Perfomers.Count, Converter={StaticResource ResourceStringFormatConverter1}, ConverterParameter=TaskPanelActivePerfomers}" Margin="10, 5, 5, 5" Style="{DynamicResource H4}" />
                                        </Border>
                                    </Expander.Header>
                                    <Border Style="{x:Null}" bc:FrameworkElementPositionBehaviour.PanelSize="300" 
                                          bc:FrameworkElementPositionBehaviour.PanelPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                        <Grid MinWidth="200">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <Grid bc:FlowDirectionOnPositionBehaviour.NegativePosition="{Binding RelativeSource={StaticResource WindowSource}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                                <TextBlock Grid.Row="1" Style="{DynamicResource H4}" Text="{Binding Path=SelectedTask.PerfomerCollectionView.Count, Converter={StaticResource ResourceStringFormatConverter1}, ConverterParameter=TaskPanelPerfomers}" VerticalAlignment="Center" HorizontalAlignment="Left" FlowDirection="LeftToRight" Margin="10, 0" />
                                            </Grid>
                                            <controls:SearchBox SearchText="{Binding Path=SelectedTask.SearchTextPerfomers, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" FlowDirection="LeftToRight" />
                                            <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto" Margin="3" MaxHeight="400">
                                                <ItemsControl ItemsSource="{Binding Path=SelectedTask.PerfomerCollectionView}" Style="{x:Null}" HorizontalContentAlignment="Stretch" >
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate>
                                                            <Grid Margin="5" Name="MainGrid" ToolTipService.Placement="Left">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="30" />
                                                                    <ColumnDefinition Width="Auto" />
                                                                    <ColumnDefinition Width="*" MinWidth="100" />
                                                                </Grid.ColumnDefinitions>
                                                                <Border Name="MainBorder" Style="{DynamicResource TreeBorder}" BorderThickness="2">
                                                                    <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" FontWeight="Bold"
                                                                    Text="{Binding Path=FirstCharName, IsAsync=True}" Style="{DynamicResource H5}" />
                                                                </Border>
                                                                <Border Name="IsPersonInChargeRectangle" Style="{x:Null}" BorderThickness="0, 0, 0, 3" Opacity="0" >
                                                                    <Border.BorderBrush>
                                                                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                                                                    </Border.BorderBrush>
                                                                </Border>
                                                                <Grid Grid.Column="1" bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN"
                                                              bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsExecutionByPerfomer, IsAsync=True, UpdateSourceTrigger=PropertyChanged}">
                                                                    <Button Content="-" Width="30" 
                                                                    bc:VisibilityOnNullBehaviour.OriginalSize="30, NaN" 
                                                                    bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.CurrentUser.Role.AllowCancellation}" 
                                                                    Command="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.CancellingExecutionOnTaskByPerfomerCommand}" CommandParameter="{Binding Path=.}">
                                                                        <Button.ToolTip>
                                                                            <ToolTip>
                                                                                <TextBlock Text="{DynamicResource TaskPanelCancellingExecution}" />
                                                                            </ToolTip>
                                                                        </Button.ToolTip>
                                                                    </Button>
                                                                </Grid>
                                                                <TextBlock Grid.Column="2" VerticalAlignment="Center" HorizontalAlignment="Center" Text="{Binding Path=FullNamePerfomer}" />
                                                                <Polygon Name="StateOnTask" HorizontalAlignment="Right" VerticalAlignment="Top" Points="0,0 10,0 10,10" />
                                                            </Grid>
                                                            <DataTemplate.Triggers>
                                                                <DataTrigger Binding="{Binding Path=IsCurrentUser}" Value="True">
                                                                    <Setter TargetName="MainBorder" Property="Style" Value="{DynamicResource SecondBorder}" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding Path=PersonInCharge}" Value="True" >
                                                                    <Setter TargetName="IsPersonInChargeRectangle" Property="Opacity" Value="1" />
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding Path=IsStartExecutionByPerfomer}" Value="True" >
                                                                    <Setter TargetName="StateOnTask" Property="Fill" >
                                                                        <Setter.Value>
                                                                            <SolidColorBrush Color="Yellow" />
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                                <DataTrigger Binding="{Binding Path=IsExecutionByPerfomer}" Value="True" >
                                                                    <Setter TargetName="StateOnTask" Property="Fill" >
                                                                        <Setter.Value>
                                                                            <SolidColorBrush Color="Green" />
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                    <Setter TargetName="MainGrid" Property="ToolTip">
                                                                        <Setter.Value>
                                                                            <ToolTip>
                                                                                <TextBlock Text="{Binding Path=CloseDate, StringFormat=\{0:dd.MM.yyyy HH:mm:ss\}}" />
                                                                            </ToolTip>
                                                                        </Setter.Value>
                                                                    </Setter>
                                                                </DataTrigger>
                                                            </DataTemplate.Triggers>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <WrapPanel IsItemsHost="True" Orientation="Vertical" />
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                </ItemsControl>
                                            </ScrollViewer>
                                            <Button Grid.Row="3" Content="{DynamicResource TaskPanelStartExecution}" Command="{Binding Path=StartExecutionTaskCommand}"
                                        bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsNotStartExecutionTask, UpdateSourceTrigger=PropertyChanged}" >
                                                <bc:VisibilityOnNullBehaviour.OriginalSize>
                                                    <Point>
                                                        <Point.X>
                                                            <sys:Double>NaN</sys:Double>
                                                        </Point.X>
                                                        <Point.Y>
                                                            <sys:Double>30</sys:Double>
                                                        </Point.Y>
                                                    </Point>
                                                </bc:VisibilityOnNullBehaviour.OriginalSize>
                                            </Button>
                                            <Grid Grid.Row="3" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsStartExecutionTask, UpdateSourceTrigger=PropertyChanged}">
                                                <bc:VisibilityOnNullBehaviour.OriginalSize>
                                                    <Point>
                                                        <Point.X>
                                                            <sys:Double>NaN</sys:Double>
                                                        </Point.X>
                                                        <Point.Y>
                                                            <sys:Double>NaN</sys:Double>
                                                        </Point.Y>
                                                    </Point>
                                                </bc:VisibilityOnNullBehaviour.OriginalSize>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>
                                                <Border Style="{DynamicResource SecondBorder}">
                                                    <StackPanel Orientation="Horizontal" Margin="3">
                                                        <TextBlock Text="{DynamicResource TaskPanelStart}" FontWeight="Bold" />
                                                        <TextBlock Text="{Binding Path=StartDateByCurrentPerfomer}" FontWeight="Bold" />
                                                    </StackPanel>
                                                </Border>
                                                <Button Grid.Row="1" Content="{DynamicResource TaskPanelExecution}" Height="30" Command="{Binding Path=ExecutionTaskCommand}" />
                                            </Grid>
                                            <Grid Grid.Row="2" bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=IsExecutionTask, UpdateSourceTrigger=PropertyChanged}">
                                                <bc:VisibilityOnNullBehaviour.OriginalSize>
                                                    <Point>
                                                        <Point.X>
                                                            <sys:Double>NaN</sys:Double>
                                                        </Point.X>
                                                        <Point.Y>
                                                            <sys:Double>NaN</sys:Double>
                                                        </Point.Y>
                                                    </Point>
                                                </bc:VisibilityOnNullBehaviour.OriginalSize>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="Auto" />
                                                    <RowDefinition Height="Auto" />
                                                </Grid.RowDefinitions>

                                                <Border Style="{DynamicResource SecondBorder}">
                                                    <StackPanel Orientation="Horizontal" Margin="3">
                                                        <TextBlock Text="{DynamicResource TaskPanelStart}" FontWeight="Bold" />
                                                        <TextBlock Text="{Binding Path=StartDateByCurrentPerfomer}" FontWeight="Bold" />
                                                    </StackPanel>
                                                </Border>
                                                <Border Grid.Row="1" Style="{DynamicResource TreeBorder}" >
                                                    <StackPanel Orientation="Horizontal" Margin="3">
                                                        <TextBlock Text="{DynamicResource TaskPanelExecutionFine}" FontWeight="Bold" />
                                                        <TextBlock Text="{Binding Path=CloseDateByCurrentPerfomer}" FontWeight="Bold" />
                                                    </StackPanel>
                                                </Border>
                                            </Grid>

                                            <ItemsControl Grid.RowSpan="3" VerticalAlignment="Top" Style="{x:Null}"
                                                  ItemsSource="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.Messages, UpdateSourceTrigger=PropertyChanged}" MaxHeight="200"
                                                  bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.ShowMessage, UpdateSourceTrigger=PropertyChanged}"
                                                  bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN">
                                                <ItemsControl.ItemTemplate>
                                                    <DataTemplate>
                                                        <Grid Name="ErrorPanel" RenderTransformOrigin="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowMessageBehaviour.OriginalPoint)}" >
                                                            <Grid.Background>
                                                                <SolidColorBrush Color="{Binding Path=BackColor}" />
                                                            </Grid.Background>
                                                            <Grid.RenderTransform>
                                                                <ScaleTransform ScaleY="0"  />
                                                            </Grid.RenderTransform>
                                                            <TextBlock Padding="20, 10" Text="{Binding Path=Content}" TextWrapping="Wrap" FontSize="14" FontWeight="Bold" >
                                                                <TextBlock.Foreground>
                                                                    <SolidColorBrush Color="{Binding Path=ForeColor, IsAsync=True}" />
                                                                </TextBlock.Foreground>
                                                            </TextBlock>
                                                            <Grid.Triggers>
                                                                <EventTrigger RoutedEvent="Loaded">
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </EventTrigger>
                                                            </Grid.Triggers>
                                                            <i:Interaction.Triggers>
                                                                <i:EventTrigger EventName="MouseLeftButtonUp" >
                                                                    <i:InvokeCommandAction Command="{Binding RelativeSource={StaticResource WindowSource}, Path=DataContext.ClickByMessageCommand}" CommandParameter="{Binding Path=.}" />
                                                                </i:EventTrigger>
                                                            </i:Interaction.Triggers>
                                                        </Grid>
                                                    </DataTemplate>
                                                </ItemsControl.ItemTemplate>
                                                <ItemsControl.Template>
                                                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                                                        <ScrollViewer VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled">
                                                            <ItemsPresenter />
                                                        </ScrollViewer>
                                                    </ControlTemplate>
                                                </ItemsControl.Template>
                                            </ItemsControl>
                                        </Grid>
                                    </Border>
                                </Expander>
                                <Expander IsExpanded="False" 
                                          bc:GlobalPercentageFrameworkElementBehaviour.Type="Max"
                                          bc:GlobalPercentageFrameworkElementBehaviour.UsePosition="True"
                                          bc:GlobalPercentageFrameworkElementBehaviour.Procentage="50">
                                    <Expander.Header>
                                        <Border Style="{DynamicResource TreeBorder}" BorderThickness="2, 0, 0, 0">
                                            <TextBlock Text="{Binding Path=SelectedTask.CountComment, Converter={StaticResource ResourceStringFormatConverter1}, ConverterParameter=TaskPanelComments}" Margin="10, 5, 5, 5" Style="{DynamicResource H4}" />
                                        </Border>
                                    </Expander.Header>
                                    <Border Style="{x:Null}" bc:FrameworkElementPositionBehaviour.PanelSize="300" 
                                          bc:FrameworkElementPositionBehaviour.PanelPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto" />
                                                <RowDefinition />
                                                <RowDefinition Height="Auto" />
                                            </Grid.RowDefinitions>
                                            <Grid bc:FlowDirectionOnPositionBehaviour.NegativePosition="{Binding RelativeSource={StaticResource WindowSource}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                                                <TextBlock Grid.Row="1" Style="{DynamicResource H4}" Text="{Binding Path=SelectedTask.CommentCollection.Count, Converter={StaticResource ResourceStringFormatConverter1}, ConverterParameter=TaskPanelComments}" VerticalAlignment="Center" HorizontalAlignment="Left" FlowDirection="LeftToRight" Margin="10, 0" />
                                            </Grid>
                                            <controls:SearchBox SearchText="{Binding Path=SelectedTask.SearchTextComments, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" FlowDirection="RightToLeft" />

                                            <ItemsControl Grid.Row="1" ItemsSource="{Binding Path=SelectedTask.CommentCollection}" Style="{x:Null}" HorizontalContentAlignment="Stretch">
                                                <ItemsControl.ItemTemplateSelector>
                                                    <sell:TaskCommentSelector 
                                                        CommonTemplate="{StaticResource CommonComment}"
                                                        SystemTemplate="{StaticResource SystemComment}"
                                                        MyCommonTemplate="{StaticResource MyCommonComment}"
                                                        MySystemTemplate="{StaticResource MySystemComment}" />
                                                </ItemsControl.ItemTemplateSelector>
                                                <ItemsControl.Template>
                                                    <ControlTemplate TargetType="{x:Type ItemsControl}">
                                                        <ControlTemplate.Resources>
                                                            <Style TargetType="{x:Type ItemsControl}" />
                                                        </ControlTemplate.Resources>
                                                        <Grid>
                                                            <info:ScrollViewInfo RowCount="{Binding Path=SelectedTask.Comments.Count}" 
                                                                                 VerticalMetric="{Binding Path=VerticalMetric}" 
                                                                                 VerticalDataSource="{Binding Path=SelectedTask.VerticalComments, UpdateSourceTrigger=PropertyChanged}"
                                                                                 VerticalSizeItems="5"
                                                                                 HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Visible">
                                                                <i:Interaction.Triggers>
                                                                    <i:EventTrigger EventName="Loaded">
                                                                        <i:InvokeCommandAction Command="{Binding Path=LoadCommentPanelCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type info:ScrollViewInfo}}}" />
                                                                    </i:EventTrigger>
                                                                </i:Interaction.Triggers>
                                                                <ItemsPresenter />
                                                            </info:ScrollViewInfo>
                                                            <Button Content="more" HorizontalAlignment="Center" VerticalAlignment="Top" Padding="10, 3" 
                                                                Command="{Binding Path=LoadMoreCommentsCommand}" CommandParameter="{Binding Path=SelectedTask}"
                                                                Visibility="{Binding SelectedTask.IsAccessMore, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                                        </Grid>
                                                    </ControlTemplate>
                                                </ItemsControl.Template>
                                                <ItemsControl.GroupStyle>
                                                    <GroupStyle>
                                                        <GroupStyle.HeaderTemplate>
                                                            <DataTemplate>
                                                                <TextBlock Text="{Binding Path=Name}" Foreground="Blue" Margin="30,0,0,0" Width="100"/>
                                                            </DataTemplate>
                                                        </GroupStyle.HeaderTemplate>
                                                    </GroupStyle>
                                                </ItemsControl.GroupStyle>
                                            </ItemsControl>
                                            <Grid Grid.Row="2" MaxHeight="70">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition />
                                                    <ColumnDefinition Width="70" />
                                                </Grid.ColumnDefinitions>
                                                <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                                    <TextBox Text="{Binding Path=CommentText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" TextWrapping="Wrap" AcceptsReturn="True" >
                                                        <TextBox.InputBindings>
                                                            <KeyBinding Gesture="Enter" Command="{Binding Path=SendCommentCommand}" CommandParameter="{Binding Path=SelectedTask}" />
                                                        </TextBox.InputBindings>
                                                    </TextBox>
                                                </ScrollViewer>
                                                <Button Grid.Column="1" Content="send" Command="{Binding Path=SendCommentCommand}" CommandParameter="{Binding Path=SelectedTask}" />
                                            </Grid>
                                        </Grid>
                                    </Border>
                                </Expander>
                            </WrapPanel>
                        </Border>
                    </Border>
                </Popup>

                <ToggleButton Grid.Row="2" Grid.Column="2" MinHeight="50" MinWidth="50" IsChecked="{Binding Path=IsCalendar, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
                    <ToggleButton.ToolTip>
                        <ToolTip>
                            <TextBlock Text="{DynamicResource TaskPanelCalendar}" />
                        </ToolTip>
                    </ToggleButton.ToolTip>
                    <ToggleButton.Content>
                        <Rectangle Width="50" Height="50" VerticalAlignment="Center" HorizontalAlignment="Center">
                            <Rectangle.Fill>
                                <SolidColorBrush Color="{DynamicResource FForeColor}" />
                            </Rectangle.Fill>
                            <Rectangle.OpacityMask>
                                <ImageBrush ImageSource="/ExtendedControl;component/Images/Calendar.png" />
                            </Rectangle.OpacityMask>
                        </Rectangle>
                    </ToggleButton.Content>
                </ToggleButton>
            </Grid>
        </Border>
    </ControlTemplate>
    <Style TargetType="{x:Type ContentControl}" x:Key="TasksPanelStyle" >
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template" Value="{DynamicResource TasksPanelTemplate}" />
    </Style>
</ResourceDictionary>