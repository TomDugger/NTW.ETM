<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:bc="clr-namespace:NTW.Controls.Behaviours;assembly=NTW.Controls"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity">

    <SolidColorBrush x:Key="BorderColor" Color="{DynamicResource FForeColor}" />
    <DataTemplate x:Key="MenuItemTemplate">
        <Border Width="50" Height="50" Focusable="False" x:Name="bcm"
                Style="{x:Null}" Tag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" 
                bc:WindowDragEndDropBehaviour.UseDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=DragDropElement, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                bc:WindowDragEndDropBehaviour.SetItemsCommand="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=SetItemDropCommand}" 
                bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
            <Border.ContextMenu>
                <ContextMenu bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=TypeElement, UpdateSourceTrigger=PropertyChanged}" 
                             bc:VisibilityOnNullBehaviour.OriginalSize="NaN, NaN">
                    <MenuItem Header="{DynamicResource ControlMenuRemove}" 
                              Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.Tag.RemoveCommand}"
                              CommandParameter="{Binding Path=.}" />
                    <MenuItem Header="{DynamicResource ControlMenuUnsafe}"
                              Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ContextMenu}}, Path=PlacementTarget.Tag.StateBeginCommand}"
                              CommandParameter="{Binding Path=.}" />
                </ContextMenu>
            </Border.ContextMenu>
            <Grid Background="#01000000"
                  Focusable="False"
                  bc:ToolTipBehaviour.Resource="{Binding Path=ResourceToolTip}"
                  bc:MenuItemVisibilityBehaviour.IsVisible="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=IsVisibleItems}"
                  bc:MenuItemVisibilityBehaviour.UseAnimation="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=UseAnimation}" >
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseLeftButtonUp">
                        <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=ActiveCommand}"
                                               CommandParameter="{Binding Path=.}" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>

                <Border Name="back" Focusable="False" >
                    <Border.RenderTransformOrigin>
                        <Point X="0.5" Y="0.5" />
                    </Border.RenderTransformOrigin>
                    <Border.RenderTransform>
                        <ScaleTransform ScaleY="1" ScaleX="1" />
                    </Border.RenderTransform>
                </Border>
                <Border Name="move" Style="{StaticResource SecondBorder}" Focusable="False">
                    <Border.RenderTransformOrigin>
                        <Point X="0.5" Y="0.5" />
                    </Border.RenderTransformOrigin>
                    <Border.RenderTransform>
                        <ScaleTransform ScaleY="0" />
                    </Border.RenderTransform>
                </Border>

                <Border Name="IsActive" Style="{StaticResource TreeBorder}" Opacity="0.3" Focusable="False" />

                <Rectangle x:Name="content" Width="50" Height="50" Focusable="False" >
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Rectangle.Fill>
                    <Rectangle.OpacityMask>
                        <ImageBrush ImageSource="{Binding Path=Content}" />
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="content" Property="Fill">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource SForeColor}" />
                    </Setter.Value>
                </Setter>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.3" />
                            
                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />

                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <DataTrigger Binding="{Binding Path=Element}" Value="{x:Null}" >
                <Setter TargetName="IsActive" Property="Height" Value="0" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=TypeElement}" Value="{x:Null}">
                <Setter TargetName="bcm" Property="ContextMenu" Value="{x:Null}" />
                <Setter TargetName="bcm" Property="bc:WindowDragEndDropBehaviour.UseDrag" Value="{x:Null}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="AddMenuItemTemplate">
        <Grid Focusable="False" 
              ToolTipService.PlacementTarget="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}"
              bc:ToolTipBehaviour.Resource="{Binding Path=ResourceToolTip}" Background="#01000000">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="MouseLeftButtonUp">
                    <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=AddCommand}"
                                           CommandParameter="{Binding Path=.}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>

            <Border Name="back" Focusable="False">
                <Border.RenderTransformOrigin>
                    <Point X="0.5" Y="0.5" />
                </Border.RenderTransformOrigin>
                <Border.RenderTransform>
                    <ScaleTransform ScaleY="1" ScaleX="1" />
                </Border.RenderTransform>
            </Border>
            <Border Name="move" Style="{StaticResource SecondBorder}" Focusable="False">
                <Border.RenderTransformOrigin>
                    <Point X="0.5" Y="0.5" />
                </Border.RenderTransformOrigin>
                <Border.RenderTransform>
                    <ScaleTransform ScaleY="0" />
                </Border.RenderTransform>
            </Border>

            <Rectangle Focusable="False" Width="50" Height="50" x:Name="content" >
                <Rectangle.Fill>
                    <SolidColorBrush Color="{DynamicResource FForeColor}" />
                </Rectangle.Fill>
                <Rectangle.OpacityMask>
                    <ImageBrush ImageSource="{Binding Path=Content}" />
                </Rectangle.OpacityMask>
            </Rectangle>
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="content" Property="Fill">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource SForeColor}" />
                    </Setter.Value>
                </Setter>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.3" />

                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />

                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="AddItemTemplate">
        <Grid Focusable="False"
              bc:MenuItemVisibilityBehaviour.IsVisible="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=IsVisibleItems}" 
              bc:MenuItemVisibilityBehaviour.UseAnimation="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=UseAnimation}">
            <Grid Width="0" Height="0" Focusable="False"
                  ToolTipService.PlacementTarget="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}"
                  bc:ToolTipBehaviour.Resource="{Binding Path=ResourceToolTip}"
                  bc:VisibilityOnNullBehaviour.OriginalSize="50, 50"
                  bc:VisibilityOnNullBehaviour.VisibilityOnNull="{Binding Path=AddItems.Count}">
                <Border Name="back" Focusable="False">
                    <Border.RenderTransformOrigin>
                        <Point X="0.5" Y="0.5" />
                    </Border.RenderTransformOrigin>
                    <Border.RenderTransform>
                        <ScaleTransform ScaleY="1" ScaleX="1" />
                    </Border.RenderTransform>
                </Border>
                <Border Name="move" Style="{StaticResource SecondBorder}" Focusable="False" >
                    <Border.RenderTransformOrigin>
                        <Point X="0.5" Y="0.5" />
                    </Border.RenderTransformOrigin>
                    <Border.RenderTransform>
                        <ScaleTransform ScaleY="0" />
                    </Border.RenderTransform>
                </Border>
                <Border Name="check" Style="{StaticResource TreeBorder}" Focusable="False" >
                    <Border.RenderTransformOrigin>
                        <Point X="0.5" Y="0.5" />
                    </Border.RenderTransformOrigin>
                    <Border.RenderTransform>
                        <ScaleTransform ScaleY="0" />
                    </Border.RenderTransform>
                </Border>

                <Rectangle x:Name="content" Width="50" Height="50" Focusable="False" >
                    <Rectangle.Fill>
                        <SolidColorBrush Color="{DynamicResource FForeColor}" />
                    </Rectangle.Fill>
                    <Rectangle.OpacityMask>
                        <ImageBrush ImageSource="{Binding Path=Content}" />
                    </Rectangle.OpacityMask>
                </Rectangle>

                <ToggleButton Name="AddButton" Background="#01000000" Focusable="False" >
                    <ToggleButton.Template>
                        <ControlTemplate TargetType="{x:Type ToggleButton}" >
                            <Border Style="{x:Null}" Background="{TemplateBinding Background}" />
                        </ControlTemplate>
                    </ToggleButton.Template>
                </ToggleButton>
            </Grid>
            

            <Popup IsOpen="{Binding ElementName=AddButton, Path=IsChecked, Mode=TwoWay, IsAsync=True}" PlacementTarget="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}}"
                   StaysOpen="False" Focusable="False"
                   bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}">
                <Border Style="{x:Null}" BorderBrush="{StaticResource BorderColor}" Focusable="False"
                        bc:FrameworkElementPositionBehaviour.FrameworkElementPosition="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}, Path=(bc:WindowPositionBehaviour.WindowPosition)}"> 
                    <ItemsControl Style="{DynamicResource MenuItemsStyle}" ItemsSource="{Binding Path=AddItems}" Focusable="False"
                              ItemTemplate="{DynamicResource AddMenuItemTemplate}" />
                </Border>
            </Popup>
        </Grid>
        <DataTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="content" Property="Fill">
                    <Setter.Value>
                        <SolidColorBrush Color="{DynamicResource SForeColor}" />
                    </Setter.Value>
                </Setter>
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.3" />

                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleX" To="1" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="back" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.3" />

                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleX" To="0" Duration="0:0:0.3" />
                            <DoubleAnimation Storyboard.TargetName="move" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.3" />
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <Style TargetType="{x:Type ItemsControl}" x:Key="MenuItemsPresenter">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ItemsControl}">
                    <ItemsPresenter />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>